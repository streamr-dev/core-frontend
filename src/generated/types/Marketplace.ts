/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "addCrossChainInbox(uint32,address)": FunctionFragment;
    "addCrossChainMarketplace(uint32,address)": FunctionFragment;
    "buy(bytes32,uint256)": FunctionFragment;
    "buyFor(bytes32,uint256,address)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "destinationDomainId()": FunctionFragment;
    "domainIdToCrossChainInbox(uint32)": FunctionFragment;
    "domainIdToCrossChainMarketplace(uint32)": FunctionFragment;
    "getPurchaseInfo(bytes32,uint256,uint32,uint256)": FunctionFragment;
    "halt()": FunctionFragment;
    "halted()": FunctionFragment;
    "handle(uint32,bytes32,bytes)": FunctionFragment;
    "initialize(address,uint32)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "projectRegistry()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resume()": FunctionFragment;
    "setTxFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txFee()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCrossChainInbox"
      | "addCrossChainMarketplace"
      | "buy"
      | "buyFor"
      | "claimOwnership"
      | "destinationDomainId"
      | "domainIdToCrossChainInbox"
      | "domainIdToCrossChainMarketplace"
      | "getPurchaseInfo"
      | "halt"
      | "halted"
      | "handle"
      | "initialize"
      | "isTrustedForwarder"
      | "onTokenTransfer"
      | "owner"
      | "pendingOwner"
      | "projectRegistry"
      | "proxiableUUID"
      | "renounceOwnership"
      | "resume"
      | "setTxFee"
      | "transferOwnership"
      | "txFee"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCrossChainInbox",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addCrossChainMarketplace",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFor",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destinationDomainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainIdToCrossChainInbox",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainIdToCrossChainMarketplace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseInfo",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "halt", values?: undefined): string;
  encodeFunctionData(functionFragment: "halted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "txFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCrossChainInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCrossChainMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinationDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainIdToCrossChainInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainIdToCrossChainMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "halt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "halted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Halted()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectPurchased(bytes32,address,uint256,uint256,uint256)": EventFragment;
    "Resumed()": EventFragment;
    "TxFeeChanged(uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Halted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface HaltedEventObject {}
export type HaltedEvent = TypedEvent<[], HaltedEventObject>;

export type HaltedEventFilter = TypedEventFilter<HaltedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProjectPurchasedEventObject {
  projectId: string;
  subscriber: string;
  subscriptionSeconds: BigNumber;
  price: BigNumber;
  fee: BigNumber;
}
export type ProjectPurchasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ProjectPurchasedEventObject
>;

export type ProjectPurchasedEventFilter =
  TypedEventFilter<ProjectPurchasedEvent>;

export interface ResumedEventObject {}
export type ResumedEvent = TypedEvent<[], ResumedEventObject>;

export type ResumedEventFilter = TypedEventFilter<ResumedEvent>;

export interface TxFeeChangedEventObject {
  newTxFee: BigNumber;
}
export type TxFeeChangedEvent = TypedEvent<
  [BigNumber],
  TxFeeChangedEventObject
>;

export type TxFeeChangedEventFilter = TypedEventFilter<TxFeeChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCrossChainInbox(
      originDomainId: BigNumberish,
      inboxAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addCrossChainMarketplace(
      originDomainId: BigNumberish,
      remoteMarketplaceAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buy(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyFor(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    destinationDomainId(overrides?: CallOverrides): Promise<[number]>;

    domainIdToCrossChainInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    domainIdToCrossChainMarketplace(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPurchaseInfo(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      originDomainId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    halt(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    halted(overrides?: CallOverrides): Promise<[boolean]>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      _projectRegistry: string,
      _destinationDomainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    projectRegistry(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTxFee(
      newTxFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    txFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addCrossChainInbox(
    originDomainId: BigNumberish,
    inboxAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addCrossChainMarketplace(
    originDomainId: BigNumberish,
    remoteMarketplaceAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buy(
    projectId: BytesLike,
    subscriptionSeconds: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyFor(
    projectId: BytesLike,
    subscriptionSeconds: BigNumberish,
    subscriber: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  destinationDomainId(overrides?: CallOverrides): Promise<number>;

  domainIdToCrossChainInbox(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  domainIdToCrossChainMarketplace(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPurchaseInfo(
    projectId: BytesLike,
    subscriptionSeconds: BigNumberish,
    originDomainId: BigNumberish,
    purchaseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

  halt(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  halted(overrides?: CallOverrides): Promise<boolean>;

  handle(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    _projectRegistry: string,
    _destinationDomainId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onTokenTransfer(
    sender: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  projectRegistry(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTxFee(
    newTxFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  txFee(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCrossChainInbox(
      originDomainId: BigNumberish,
      inboxAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addCrossChainMarketplace(
      originDomainId: BigNumberish,
      remoteMarketplaceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyFor(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    destinationDomainId(overrides?: CallOverrides): Promise<number>;

    domainIdToCrossChainInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    domainIdToCrossChainMarketplace(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPurchaseInfo(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      originDomainId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    halt(overrides?: CallOverrides): Promise<void>;

    halted(overrides?: CallOverrides): Promise<boolean>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _projectRegistry: string,
      _destinationDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    projectRegistry(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    setTxFee(newTxFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txFee(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Halted()"(): HaltedEventFilter;
    Halted(): HaltedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProjectPurchased(bytes32,address,uint256,uint256,uint256)"(
      projectId?: null,
      subscriber?: null,
      subscriptionSeconds?: null,
      price?: null,
      fee?: null
    ): ProjectPurchasedEventFilter;
    ProjectPurchased(
      projectId?: null,
      subscriber?: null,
      subscriptionSeconds?: null,
      price?: null,
      fee?: null
    ): ProjectPurchasedEventFilter;

    "Resumed()"(): ResumedEventFilter;
    Resumed(): ResumedEventFilter;

    "TxFeeChanged(uint256)"(
      newTxFee?: BigNumberish | null
    ): TxFeeChangedEventFilter;
    TxFeeChanged(newTxFee?: BigNumberish | null): TxFeeChangedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addCrossChainInbox(
      originDomainId: BigNumberish,
      inboxAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addCrossChainMarketplace(
      originDomainId: BigNumberish,
      remoteMarketplaceAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buy(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyFor(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    destinationDomainId(overrides?: CallOverrides): Promise<BigNumber>;

    domainIdToCrossChainInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainIdToCrossChainMarketplace(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchaseInfo(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      originDomainId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    halt(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    halted(overrides?: CallOverrides): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      _projectRegistry: string,
      _destinationDomainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    projectRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    resume(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setTxFee(
      newTxFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    txFee(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCrossChainInbox(
      originDomainId: BigNumberish,
      inboxAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addCrossChainMarketplace(
      originDomainId: BigNumberish,
      remoteMarketplaceAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buy(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyFor(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    destinationDomainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainIdToCrossChainInbox(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainIdToCrossChainMarketplace(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchaseInfo(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      originDomainId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    halt(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    halted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      _projectRegistry: string,
      _destinationDomainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTxFee(
      newTxFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    txFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
