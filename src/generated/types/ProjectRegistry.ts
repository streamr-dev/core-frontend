/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IProjectRegistry {
  export type PaymentDetailsByChainStruct = {
    beneficiary: string;
    pricingTokenAddress: string;
    pricePerSecond: BigNumberish;
  };

  export type PaymentDetailsByChainStructOutput = [
    string,
    string,
    BigNumber
  ] & {
    beneficiary: string;
    pricingTokenAddress: string;
    pricePerSecond: BigNumber;
  };

  export type PermissionStruct = {
    canBuy: boolean;
    canDelete: boolean;
    canEdit: boolean;
    canGrant: boolean;
  };

  export type PermissionStructOutput = [boolean, boolean, boolean, boolean] & {
    canBuy: boolean;
    canDelete: boolean;
    canEdit: boolean;
    canGrant: boolean;
  };
}

export interface ProjectRegistryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "TRUSTED_FORWARDER_ROLE()": FunctionFragment;
    "TRUSTED_ROLE()": FunctionFragment;
    "addStream(bytes32,string)": FunctionFragment;
    "addStreams(bytes32,string[])": FunctionFragment;
    "canBuyProject(bytes32,address)": FunctionFragment;
    "createProject(bytes32,uint32[],(address,address,uint256)[],string[],uint256,bool,string)": FunctionFragment;
    "deleteProject(bytes32)": FunctionFragment;
    "enablePermissionType(bytes32,address,uint8)": FunctionFragment;
    "exists(bytes32)": FunctionFragment;
    "getAddressKey(bytes32,address)": FunctionFragment;
    "getOwnSubscription(bytes32)": FunctionFragment;
    "getPaymentDetailsByChain(bytes32,uint32)": FunctionFragment;
    "getPermission(bytes32,address)": FunctionFragment;
    "getProject(bytes32,uint32[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSubscription(bytes32,address)": FunctionFragment;
    "getTrustedRole()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "grantSubscription(bytes32,uint256,address)": FunctionFragment;
    "hasPermissionType(bytes32,address,uint8)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasValidSubscription(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isStreamAdded(bytes32,string)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "projects(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeStream(bytes32,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeAllPermissionsForUser(bytes32,address)": FunctionFragment;
    "revokePermissionType(bytes32,address,uint8)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setPermissionBooleans(bytes32,address,bool,bool,bool,bool)": FunctionFragment;
    "setPermissionsForMultipleProjects(bytes32[],address[][],tuple[][])": FunctionFragment;
    "setPermissionsForMultipleUsers(bytes32,address[],(bool,bool,bool,bool)[])": FunctionFragment;
    "setStreams(bytes32,string[])": FunctionFragment;
    "streamRegistry()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferAllPermissionsToUser(bytes32,address)": FunctionFragment;
    "transferPermissionType(bytes32,address,uint8)": FunctionFragment;
    "trustedCreateProject(bytes32,uint32[],(address,address,uint256)[],string[],uint256,address,bool,string)": FunctionFragment;
    "trustedSetPermissions(bytes32,address,bool,bool,bool,bool)": FunctionFragment;
    "trustedSetPermissionsForMultipleProjects(bytes32[],address[],(bool,bool,bool,bool)[])": FunctionFragment;
    "updatePaymentDetailsByChain(bytes32,uint32,address,address,uint256)": FunctionFragment;
    "updateProject(bytes32,uint32[],(address,address,uint256)[],string[],uint256,string)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "TRUSTED_FORWARDER_ROLE"
      | "TRUSTED_ROLE"
      | "addStream"
      | "addStreams"
      | "canBuyProject"
      | "createProject"
      | "deleteProject"
      | "enablePermissionType"
      | "exists"
      | "getAddressKey"
      | "getOwnSubscription"
      | "getPaymentDetailsByChain"
      | "getPermission"
      | "getProject"
      | "getRoleAdmin"
      | "getSubscription"
      | "getTrustedRole"
      | "grantRole"
      | "grantSubscription"
      | "hasPermissionType"
      | "hasRole"
      | "hasValidSubscription"
      | "initialize"
      | "isStreamAdded"
      | "isTrustedForwarder"
      | "projects"
      | "proxiableUUID"
      | "removeStream"
      | "renounceRole"
      | "revokeAllPermissionsForUser"
      | "revokePermissionType"
      | "revokeRole"
      | "setPermissionBooleans"
      | "setPermissionsForMultipleProjects"
      | "setPermissionsForMultipleUsers"
      | "setStreams"
      | "streamRegistry"
      | "supportsInterface"
      | "transferAllPermissionsToUser"
      | "transferPermissionType"
      | "trustedCreateProject"
      | "trustedSetPermissions"
      | "trustedSetPermissionsForMultipleProjects"
      | "updatePaymentDetailsByChain"
      | "updateProject"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUSTED_FORWARDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUSTED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStream",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStreams",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canBuyProject",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      BytesLike,
      BigNumberish[],
      IProjectRegistry.PaymentDetailsByChainStruct[],
      string[],
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProject",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePermissionType",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exists", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAddressKey",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnSubscription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentDetailsByChain",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermission",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantSubscription",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermissionType",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidSubscription",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStreamAdded",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "projects", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStream",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllPermissionsForUser",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermissionType",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionBooleans",
    values: [BytesLike, string, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionsForMultipleProjects",
    values: [BytesLike[], string[][], IProjectRegistry.PermissionStruct[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionsForMultipleUsers",
    values: [BytesLike, string[], IProjectRegistry.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStreams",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "streamRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllPermissionsToUser",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPermissionType",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedCreateProject",
    values: [
      BytesLike,
      BigNumberish[],
      IProjectRegistry.PaymentDetailsByChainStruct[],
      string[],
      BigNumberish,
      string,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetPermissions",
    values: [BytesLike, string, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetPermissionsForMultipleProjects",
    values: [BytesLike[], string[], IProjectRegistry.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentDetailsByChain",
    values: [BytesLike, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProject",
    values: [
      BytesLike,
      BigNumberish[],
      IProjectRegistry.PaymentDetailsByChainStruct[],
      string[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTED_FORWARDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addStreams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canBuyProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentDetailsByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasValidSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStreamAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllPermissionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionBooleans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionsForMultipleProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionsForMultipleUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStreams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "streamRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllPermissionsToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedCreateProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetPermissionsForMultipleProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentDetailsByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewSubscription(bytes32,address,uint256)": EventFragment;
    "PaymentDetailsByChainUpdated(bytes32,uint32,address,address,uint256)": EventFragment;
    "PermissionUpdated(bytes32,address,bool,bool,bool,bool)": EventFragment;
    "ProjectCreated(bytes32,uint32[],tuple[],string[],uint256,string)": EventFragment;
    "ProjectDeleted(bytes32)": EventFragment;
    "ProjectUpdated(bytes32,uint32[],tuple[],string[],uint256,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StreamAdded(bytes32,string)": EventFragment;
    "StreamRemoved(bytes32,string)": EventFragment;
    "Subscribed(bytes32,address,uint256)": EventFragment;
    "SubscriptionExtended(bytes32,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSubscription"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PaymentDetailsByChainUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewSubscriptionEventObject {
  projectId: string;
  subscriber: string;
  endTimestamp: BigNumber;
}
export type NewSubscriptionEvent = TypedEvent<
  [string, string, BigNumber],
  NewSubscriptionEventObject
>;

export type NewSubscriptionEventFilter = TypedEventFilter<NewSubscriptionEvent>;

export interface PaymentDetailsByChainUpdatedEventObject {
  id: string;
  domainId: number;
  beneficiary: string;
  pricingTokenAddress: string;
  pricePerSecond: BigNumber;
}
export type PaymentDetailsByChainUpdatedEvent = TypedEvent<
  [string, number, string, string, BigNumber],
  PaymentDetailsByChainUpdatedEventObject
>;

export type PaymentDetailsByChainUpdatedEventFilter =
  TypedEventFilter<PaymentDetailsByChainUpdatedEvent>;

export interface PermissionUpdatedEventObject {
  projectId: string;
  user: string;
  canBuy: boolean;
  canDelete: boolean;
  canEdit: boolean;
  canGrant: boolean;
}
export type PermissionUpdatedEvent = TypedEvent<
  [string, string, boolean, boolean, boolean, boolean],
  PermissionUpdatedEventObject
>;

export type PermissionUpdatedEventFilter =
  TypedEventFilter<PermissionUpdatedEvent>;

export interface ProjectCreatedEventObject {
  id: string;
  domainIds: number[];
  paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStructOutput[];
  streams: string[];
  minimumSubscriptionSeconds: BigNumber;
  metadata: string;
}
export type ProjectCreatedEvent = TypedEvent<
  [
    string,
    number[],
    IProjectRegistry.PaymentDetailsByChainStructOutput[],
    string[],
    BigNumber,
    string
  ],
  ProjectCreatedEventObject
>;

export type ProjectCreatedEventFilter = TypedEventFilter<ProjectCreatedEvent>;

export interface ProjectDeletedEventObject {
  id: string;
}
export type ProjectDeletedEvent = TypedEvent<
  [string],
  ProjectDeletedEventObject
>;

export type ProjectDeletedEventFilter = TypedEventFilter<ProjectDeletedEvent>;

export interface ProjectUpdatedEventObject {
  id: string;
  domainIds: number[];
  paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStructOutput[];
  streams: string[];
  minimumSubscriptionSeconds: BigNumber;
  metadata: string;
}
export type ProjectUpdatedEvent = TypedEvent<
  [
    string,
    number[],
    IProjectRegistry.PaymentDetailsByChainStructOutput[],
    string[],
    BigNumber,
    string
  ],
  ProjectUpdatedEventObject
>;

export type ProjectUpdatedEventFilter = TypedEventFilter<ProjectUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StreamAddedEventObject {
  projectId: string;
  streamId: string;
}
export type StreamAddedEvent = TypedEvent<
  [string, string],
  StreamAddedEventObject
>;

export type StreamAddedEventFilter = TypedEventFilter<StreamAddedEvent>;

export interface StreamRemovedEventObject {
  projectId: string;
  streamId: string;
}
export type StreamRemovedEvent = TypedEvent<
  [string, string],
  StreamRemovedEventObject
>;

export type StreamRemovedEventFilter = TypedEventFilter<StreamRemovedEvent>;

export interface SubscribedEventObject {
  projectId: string;
  subscriber: string;
  endTimestamp: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, string, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface SubscriptionExtendedEventObject {
  projectId: string;
  subscriber: string;
  endTimestamp: BigNumber;
}
export type SubscriptionExtendedEvent = TypedEvent<
  [string, string, BigNumber],
  SubscriptionExtendedEventObject
>;

export type SubscriptionExtendedEventFilter =
  TypedEventFilter<SubscriptionExtendedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ProjectRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProjectRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TRUSTED_FORWARDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addStreams(
      projectId: BytesLike,
      streamIds: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    canBuyProject(
      projectId: BytesLike,
      buyer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isPurchable: boolean }>;

    createProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deleteProject(
      projectId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enablePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exists(projectId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    getAddressKey(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwnSubscription(
      projectId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
    >;

    getPaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        beneficiary: string;
        pricingTokenAddress: string;
        pricePerSecond: BigNumber;
      }
    >;

    getPermission(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [IProjectRegistry.PermissionStructOutput] & {
        permission: IProjectRegistry.PermissionStructOutput;
      }
    >;

    getProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        IProjectRegistry.PaymentDetailsByChainStructOutput[],
        BigNumber,
        string,
        number,
        string[]
      ] & {
        paymentDetails: IProjectRegistry.PaymentDetailsByChainStructOutput[];
        minimumSubscriptionSeconds: BigNumber;
        metadata: string;
        version: number;
        streams: string[];
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
    >;

    getTrustedRole(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantSubscription(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasPermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { userHasPermissionType: boolean }>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasValidSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    initialize(
      _streamRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isStreamAdded(
      projectId: BytesLike,
      streamId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    projects(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, number] & {
        id: string;
        minimumSubscriptionSeconds: BigNumber;
        metadata: string;
        version: number;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeAllPermissionsForUser(
      projectId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPermissionBooleans(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[][],
      permissions: IProjectRegistry.PermissionStruct[][],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPermissionsForMultipleUsers(
      projectId: BytesLike,
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStreams(
      projectId: BytesLike,
      newStreams: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    streamRegistry(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferAllPermissionsToUser(
      projectId: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferPermissionType(
      projectId: BytesLike,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    trustedCreateProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      user: string,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    trustedSetPermissions(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    trustedSetPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      beneficiary: string,
      pricingToken: string,
      pricePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  TRUSTED_FORWARDER_ROLE(overrides?: CallOverrides): Promise<string>;

  TRUSTED_ROLE(overrides?: CallOverrides): Promise<string>;

  addStream(
    projectId: BytesLike,
    streamId: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addStreams(
    projectId: BytesLike,
    streamIds: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  canBuyProject(
    projectId: BytesLike,
    buyer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createProject(
    projectId: BytesLike,
    domainIds: BigNumberish[],
    paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
    streams: string[],
    minimumSubscriptionSeconds: BigNumberish,
    isPublicPurchable: boolean,
    metadataJsonString: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deleteProject(
    projectId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enablePermissionType(
    projectId: BytesLike,
    user: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exists(projectId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getAddressKey(
    projectId: BytesLike,
    user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwnSubscription(
    projectId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
  >;

  getPaymentDetailsByChain(
    projectId: BytesLike,
    domainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      beneficiary: string;
      pricingTokenAddress: string;
      pricePerSecond: BigNumber;
    }
  >;

  getPermission(
    projectId: BytesLike,
    user: string,
    overrides?: CallOverrides
  ): Promise<IProjectRegistry.PermissionStructOutput>;

  getProject(
    id: BytesLike,
    domainIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      IProjectRegistry.PaymentDetailsByChainStructOutput[],
      BigNumber,
      string,
      number,
      string[]
    ] & {
      paymentDetails: IProjectRegistry.PaymentDetailsByChainStructOutput[];
      minimumSubscriptionSeconds: BigNumber;
      metadata: string;
      version: number;
      streams: string[];
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSubscription(
    projectId: BytesLike,
    subscriber: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
  >;

  getTrustedRole(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantSubscription(
    projectId: BytesLike,
    subscriptionSeconds: BigNumberish,
    subscriber: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasPermissionType(
    projectId: BytesLike,
    user: string,
    permissionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasValidSubscription(
    projectId: BytesLike,
    subscriber: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _streamRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isStreamAdded(
    projectId: BytesLike,
    streamId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  projects(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, number] & {
      id: string;
      minimumSubscriptionSeconds: BigNumber;
      metadata: string;
      version: number;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeStream(
    projectId: BytesLike,
    streamId: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeAllPermissionsForUser(
    projectId: BytesLike,
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokePermissionType(
    projectId: BytesLike,
    user: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPermissionBooleans(
    projectId: BytesLike,
    user: string,
    canBuy: boolean,
    deletePerm: boolean,
    canEdit: boolean,
    canGrant: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPermissionsForMultipleProjects(
    projectIds: BytesLike[],
    users: string[][],
    permissions: IProjectRegistry.PermissionStruct[][],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPermissionsForMultipleUsers(
    projectId: BytesLike,
    users: string[],
    permissions: IProjectRegistry.PermissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStreams(
    projectId: BytesLike,
    newStreams: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  streamRegistry(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferAllPermissionsToUser(
    projectId: BytesLike,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferPermissionType(
    projectId: BytesLike,
    recipient: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  trustedCreateProject(
    id: BytesLike,
    domainIds: BigNumberish[],
    paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
    streams: string[],
    minimumSubscriptionSeconds: BigNumberish,
    user: string,
    isPublicPurchable: boolean,
    metadataJsonString: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  trustedSetPermissions(
    projectId: BytesLike,
    user: string,
    canBuy: boolean,
    deletePerm: boolean,
    canEdit: boolean,
    canGrant: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  trustedSetPermissionsForMultipleProjects(
    projectIds: BytesLike[],
    users: string[],
    permissions: IProjectRegistry.PermissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePaymentDetailsByChain(
    projectId: BytesLike,
    domainId: BigNumberish,
    beneficiary: string,
    pricingToken: string,
    pricePerSecond: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateProject(
    projectId: BytesLike,
    domainIds: BigNumberish[],
    paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
    streams: string[],
    minimumSubscriptionSeconds: BigNumberish,
    metadataJsonString: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    TRUSTED_FORWARDER_ROLE(overrides?: CallOverrides): Promise<string>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<string>;

    addStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addStreams(
      projectId: BytesLike,
      streamIds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    canBuyProject(
      projectId: BytesLike,
      buyer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteProject(
      projectId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    enablePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exists(projectId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getAddressKey(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwnSubscription(
      projectId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
    >;

    getPaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        beneficiary: string;
        pricingTokenAddress: string;
        pricePerSecond: BigNumber;
      }
    >;

    getPermission(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<IProjectRegistry.PermissionStructOutput>;

    getProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        IProjectRegistry.PaymentDetailsByChainStructOutput[],
        BigNumber,
        string,
        number,
        string[]
      ] & {
        paymentDetails: IProjectRegistry.PaymentDetailsByChainStructOutput[];
        minimumSubscriptionSeconds: BigNumber;
        metadata: string;
        version: number;
        streams: string[];
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
    >;

    getTrustedRole(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantSubscription(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasPermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasValidSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _streamRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isStreamAdded(
      projectId: BytesLike,
      streamId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    projects(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, number] & {
        id: string;
        minimumSubscriptionSeconds: BigNumber;
        metadata: string;
        version: number;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAllPermissionsForUser(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionBooleans(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[][],
      permissions: IProjectRegistry.PermissionStruct[][],
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionsForMultipleUsers(
      projectId: BytesLike,
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setStreams(
      projectId: BytesLike,
      newStreams: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    streamRegistry(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAllPermissionsToUser(
      projectId: BytesLike,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPermissionType(
      projectId: BytesLike,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedCreateProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      user: string,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSetPermissions(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSetPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      beneficiary: string,
      pricingToken: string,
      pricePerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      metadataJsonString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewSubscription(bytes32,address,uint256)"(
      projectId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): NewSubscriptionEventFilter;
    NewSubscription(
      projectId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): NewSubscriptionEventFilter;

    "PaymentDetailsByChainUpdated(bytes32,uint32,address,address,uint256)"(
      id?: BytesLike | null,
      domainId?: null,
      beneficiary?: null,
      pricingTokenAddress?: null,
      pricePerSecond?: null
    ): PaymentDetailsByChainUpdatedEventFilter;
    PaymentDetailsByChainUpdated(
      id?: BytesLike | null,
      domainId?: null,
      beneficiary?: null,
      pricingTokenAddress?: null,
      pricePerSecond?: null
    ): PaymentDetailsByChainUpdatedEventFilter;

    "PermissionUpdated(bytes32,address,bool,bool,bool,bool)"(
      projectId?: null,
      user?: null,
      canBuy?: null,
      canDelete?: null,
      canEdit?: null,
      canGrant?: null
    ): PermissionUpdatedEventFilter;
    PermissionUpdated(
      projectId?: null,
      user?: null,
      canBuy?: null,
      canDelete?: null,
      canEdit?: null,
      canGrant?: null
    ): PermissionUpdatedEventFilter;

    "ProjectCreated(bytes32,uint32[],tuple[],string[],uint256,string)"(
      id?: BytesLike | null,
      domainIds?: null,
      paymentDetailsByChain?: null,
      streams?: null,
      minimumSubscriptionSeconds?: null,
      metadata?: null
    ): ProjectCreatedEventFilter;
    ProjectCreated(
      id?: BytesLike | null,
      domainIds?: null,
      paymentDetailsByChain?: null,
      streams?: null,
      minimumSubscriptionSeconds?: null,
      metadata?: null
    ): ProjectCreatedEventFilter;

    "ProjectDeleted(bytes32)"(id?: BytesLike | null): ProjectDeletedEventFilter;
    ProjectDeleted(id?: BytesLike | null): ProjectDeletedEventFilter;

    "ProjectUpdated(bytes32,uint32[],tuple[],string[],uint256,string)"(
      id?: BytesLike | null,
      domainIds?: null,
      paymentDetailsByChain?: null,
      streams?: null,
      minimumSubscriptionSeconds?: null,
      metadata?: null
    ): ProjectUpdatedEventFilter;
    ProjectUpdated(
      id?: BytesLike | null,
      domainIds?: null,
      paymentDetailsByChain?: null,
      streams?: null,
      minimumSubscriptionSeconds?: null,
      metadata?: null
    ): ProjectUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "StreamAdded(bytes32,string)"(
      projectId?: null,
      streamId?: null
    ): StreamAddedEventFilter;
    StreamAdded(projectId?: null, streamId?: null): StreamAddedEventFilter;

    "StreamRemoved(bytes32,string)"(
      projectId?: null,
      streamId?: null
    ): StreamRemovedEventFilter;
    StreamRemoved(projectId?: null, streamId?: null): StreamRemovedEventFilter;

    "Subscribed(bytes32,address,uint256)"(
      projectId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscribedEventFilter;
    Subscribed(
      projectId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscribedEventFilter;

    "SubscriptionExtended(bytes32,address,uint256)"(
      projectId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscriptionExtendedEventFilter;
    SubscriptionExtended(
      projectId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscriptionExtendedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TRUSTED_FORWARDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addStreams(
      projectId: BytesLike,
      streamIds: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    canBuyProject(
      projectId: BytesLike,
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deleteProject(
      projectId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enablePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exists(projectId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getAddressKey(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnSubscription(
      projectId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermission(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedRole(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantSubscription(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasPermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasValidSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _streamRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isStreamAdded(
      projectId: BytesLike,
      streamId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projects(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeAllPermissionsForUser(
      projectId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPermissionBooleans(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[][],
      permissions: IProjectRegistry.PermissionStruct[][],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPermissionsForMultipleUsers(
      projectId: BytesLike,
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStreams(
      projectId: BytesLike,
      newStreams: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    streamRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAllPermissionsToUser(
      projectId: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferPermissionType(
      projectId: BytesLike,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    trustedCreateProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      user: string,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    trustedSetPermissions(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    trustedSetPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      beneficiary: string,
      pricingToken: string,
      pricePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRUSTED_FORWARDER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addStreams(
      projectId: BytesLike,
      streamIds: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    canBuyProject(
      projectId: BytesLike,
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deleteProject(
      projectId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enablePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exists(
      projectId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressKey(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnSubscription(
      projectId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermission(
      projectId: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantSubscription(
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasPermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasValidSubscription(
      projectId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _streamRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isStreamAdded(
      projectId: BytesLike,
      streamId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projects(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStream(
      projectId: BytesLike,
      streamId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeAllPermissionsForUser(
      projectId: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokePermissionType(
      projectId: BytesLike,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPermissionBooleans(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[][],
      permissions: IProjectRegistry.PermissionStruct[][],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPermissionsForMultipleUsers(
      projectId: BytesLike,
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStreams(
      projectId: BytesLike,
      newStreams: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    streamRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAllPermissionsToUser(
      projectId: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferPermissionType(
      projectId: BytesLike,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    trustedCreateProject(
      id: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      user: string,
      isPublicPurchable: boolean,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    trustedSetPermissions(
      projectId: BytesLike,
      user: string,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    trustedSetPermissionsForMultipleProjects(
      projectIds: BytesLike[],
      users: string[],
      permissions: IProjectRegistry.PermissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePaymentDetailsByChain(
      projectId: BytesLike,
      domainId: BigNumberish,
      beneficiary: string,
      pricingToken: string,
      pricePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateProject(
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistry.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
