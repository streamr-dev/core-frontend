/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  UniswapAdaptor,
  UniswapAdaptorInterface,
} from "../UniswapAdaptor";

const _abi = [
  {
    inputs: [
      {
        name: "_marketplace_address",
        type: "address",
      },
      {
        name: "_uniswap_factory_address",
        type: "address",
      },
      {
        name: "_datacoin_address",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    constant: true,
    inputs: [
      {
        name: "from_token",
        type: "address",
      },
      {
        name: "to_token",
        type: "address",
      },
      {
        name: "input_amount",
        type: "uint256",
      },
    ],
    name: "getConversionRateInput",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "from_token",
        type: "address",
      },
      {
        name: "to_token",
        type: "address",
      },
      {
        name: "output_amount",
        type: "uint256",
      },
    ],
    name: "getConversionRateOutput",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "productId",
        type: "bytes32",
      },
      {
        name: "minSubscriptionSeconds",
        type: "uint256",
      },
      {
        name: "timeWindow",
        type: "uint256",
      },
      {
        name: "erc20_address",
        type: "address",
      },
      {
        name: "amount",
        type: "uint256",
      },
    ],
    name: "buyWithERC20",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "productId",
        type: "bytes32",
      },
      {
        name: "minSubscriptionSeconds",
        type: "uint256",
      },
      {
        name: "timeWindow",
        type: "uint256",
      },
    ],
    name: "buyWithETH",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class UniswapAdaptor__factory {
  static readonly abi = _abi;
  static createInterface(): UniswapAdaptorInterface {
    return new utils.Interface(_abi) as UniswapAdaptorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapAdaptor {
    return new Contract(address, _abi, signerOrProvider) as UniswapAdaptor;
  }
}
