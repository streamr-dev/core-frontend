/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IProjectRegistryV1 {
  export type PaymentDetailsByChainStruct = {
    beneficiary: AddressLike;
    pricingTokenAddress: AddressLike;
    pricePerSecond: BigNumberish;
  };

  export type PaymentDetailsByChainStructOutput = [
    beneficiary: string,
    pricingTokenAddress: string,
    pricePerSecond: bigint
  ] & {
    beneficiary: string;
    pricingTokenAddress: string;
    pricePerSecond: bigint;
  };

  export type PermissionStruct = {
    canBuy: boolean;
    canDelete: boolean;
    canEdit: boolean;
    canGrant: boolean;
  };

  export type PermissionStructOutput = [
    canBuy: boolean,
    canDelete: boolean,
    canEdit: boolean,
    canGrant: boolean
  ] & {
    canBuy: boolean;
    canDelete: boolean;
    canEdit: boolean;
    canGrant: boolean;
  };
}

export interface ProjectRegistryV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "TRUSTED_FORWARDER_ROLE"
      | "TRUSTED_ROLE"
      | "addStream"
      | "addStreams"
      | "canBuyProject"
      | "createProject"
      | "deleteProject"
      | "enablePermissionType"
      | "exists"
      | "getAddressKey"
      | "getOwnSubscription"
      | "getPaymentDetailsByChain"
      | "getPermission"
      | "getProject"
      | "getRoleAdmin"
      | "getSubscription"
      | "getTrustedRole"
      | "grantRole"
      | "grantSubscription"
      | "hasPermissionType"
      | "hasRole"
      | "hasValidSubscription"
      | "initialize"
      | "isDeleted"
      | "isStreamAdded"
      | "isTrustedForwarder"
      | "projects"
      | "proxiableUUID"
      | "removeStream"
      | "renounceRole"
      | "revokeAllPermissionsForUser"
      | "revokePermissionType"
      | "revokeRole"
      | "setPermissionBooleans"
      | "setPermissionsForMultipleProjects"
      | "setPermissionsForMultipleUsers"
      | "setStreams"
      | "streamRegistry"
      | "supportsInterface"
      | "transferAllPermissionsToUser"
      | "transferPermissionType"
      | "trustedCreateProject"
      | "trustedSetPermissions"
      | "trustedSetPermissionsForMultipleProjects"
      | "updatePaymentDetailsByChain"
      | "updateProject"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "NewSubscription"
      | "PaymentDetailsByChainUpdated"
      | "PermissionUpdated"
      | "ProjectCreated"
      | "ProjectDeleted"
      | "ProjectUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StreamAdded"
      | "StreamRemoved"
      | "Subscribed"
      | "SubscriptionExtended"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUSTED_FORWARDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUSTED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStream",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStreams",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canBuyProject",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      BytesLike,
      BigNumberish[],
      IProjectRegistryV1.PaymentDetailsByChainStruct[],
      string[],
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProject",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePermissionType",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exists", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAddressKey",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnSubscription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentDetailsByChain",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermission",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantSubscription",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermissionType",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidSubscription",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeleted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStreamAdded",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "projects", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStream",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllPermissionsForUser",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermissionType",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionBooleans",
    values: [BytesLike, AddressLike, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionsForMultipleProjects",
    values: [
      BytesLike[],
      AddressLike[][],
      IProjectRegistryV1.PermissionStruct[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionsForMultipleUsers",
    values: [BytesLike, AddressLike[], IProjectRegistryV1.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStreams",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "streamRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllPermissionsToUser",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPermissionType",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedCreateProject",
    values: [
      BytesLike,
      BigNumberish[],
      IProjectRegistryV1.PaymentDetailsByChainStruct[],
      string[],
      BigNumberish,
      AddressLike,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetPermissions",
    values: [BytesLike, AddressLike, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetPermissionsForMultipleProjects",
    values: [BytesLike[], AddressLike[], IProjectRegistryV1.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentDetailsByChain",
    values: [BytesLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProject",
    values: [
      BytesLike,
      BigNumberish[],
      IProjectRegistryV1.PaymentDetailsByChainStruct[],
      string[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTED_FORWARDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addStreams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canBuyProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentDetailsByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasValidSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDeleted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStreamAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllPermissionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionBooleans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionsForMultipleProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionsForMultipleUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStreams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "streamRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllPermissionsToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPermissionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedCreateProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetPermissionsForMultipleProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentDetailsByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSubscriptionEvent {
  export type InputTuple = [
    projectId: BytesLike,
    subscriber: AddressLike,
    endTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    projectId: string,
    subscriber: string,
    endTimestamp: bigint
  ];
  export interface OutputObject {
    projectId: string;
    subscriber: string;
    endTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentDetailsByChainUpdatedEvent {
  export type InputTuple = [
    id: BytesLike,
    domainId: BigNumberish,
    beneficiary: AddressLike,
    pricingTokenAddress: AddressLike,
    pricePerSecond: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    domainId: bigint,
    beneficiary: string,
    pricingTokenAddress: string,
    pricePerSecond: bigint
  ];
  export interface OutputObject {
    id: string;
    domainId: bigint;
    beneficiary: string;
    pricingTokenAddress: string;
    pricePerSecond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionUpdatedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    user: AddressLike,
    canBuy: boolean,
    canDelete: boolean,
    canEdit: boolean,
    canGrant: boolean
  ];
  export type OutputTuple = [
    projectId: string,
    user: string,
    canBuy: boolean,
    canDelete: boolean,
    canEdit: boolean,
    canGrant: boolean
  ];
  export interface OutputObject {
    projectId: string;
    user: string;
    canBuy: boolean;
    canDelete: boolean;
    canEdit: boolean;
    canGrant: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    id: BytesLike,
    domainIds: BigNumberish[],
    paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
    streams: string[],
    minimumSubscriptionSeconds: BigNumberish,
    metadata: string
  ];
  export type OutputTuple = [
    id: string,
    domainIds: bigint[],
    paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStructOutput[],
    streams: string[],
    minimumSubscriptionSeconds: bigint,
    metadata: string
  ];
  export interface OutputObject {
    id: string;
    domainIds: bigint[];
    paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStructOutput[];
    streams: string[];
    minimumSubscriptionSeconds: bigint;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectDeletedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectUpdatedEvent {
  export type InputTuple = [
    id: BytesLike,
    domainIds: BigNumberish[],
    paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
    streams: string[],
    minimumSubscriptionSeconds: BigNumberish,
    metadata: string
  ];
  export type OutputTuple = [
    id: string,
    domainIds: bigint[],
    paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStructOutput[],
    streams: string[],
    minimumSubscriptionSeconds: bigint,
    metadata: string
  ];
  export interface OutputObject {
    id: string;
    domainIds: bigint[];
    paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStructOutput[];
    streams: string[];
    minimumSubscriptionSeconds: bigint;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreamAddedEvent {
  export type InputTuple = [projectId: BytesLike, streamId: string];
  export type OutputTuple = [projectId: string, streamId: string];
  export interface OutputObject {
    projectId: string;
    streamId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreamRemovedEvent {
  export type InputTuple = [projectId: BytesLike, streamId: string];
  export type OutputTuple = [projectId: string, streamId: string];
  export interface OutputObject {
    projectId: string;
    streamId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    subscriber: AddressLike,
    endTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    projectId: string,
    subscriber: string,
    endTimestamp: bigint
  ];
  export interface OutputObject {
    projectId: string;
    subscriber: string;
    endTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionExtendedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    subscriber: AddressLike,
    endTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    projectId: string,
    subscriber: string,
    endTimestamp: bigint
  ];
  export interface OutputObject {
    projectId: string;
    subscriber: string;
    endTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProjectRegistryV1 extends BaseContract {
  connect(runner?: ContractRunner | null): ProjectRegistryV1;
  waitForDeployment(): Promise<this>;

  interface: ProjectRegistryV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  TRUSTED_FORWARDER_ROLE: TypedContractMethod<[], [string], "view">;

  TRUSTED_ROLE: TypedContractMethod<[], [string], "view">;

  addStream: TypedContractMethod<
    [projectId: BytesLike, streamId: string],
    [void],
    "nonpayable"
  >;

  addStreams: TypedContractMethod<
    [projectId: BytesLike, streamIds: string[]],
    [void],
    "nonpayable"
  >;

  canBuyProject: TypedContractMethod<
    [projectId: BytesLike, buyer: AddressLike],
    [boolean],
    "view"
  >;

  createProject: TypedContractMethod<
    [
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      isPublicPurchable: boolean,
      metadataJsonString: string
    ],
    [void],
    "nonpayable"
  >;

  deleteProject: TypedContractMethod<
    [projectId: BytesLike],
    [void],
    "nonpayable"
  >;

  enablePermissionType: TypedContractMethod<
    [projectId: BytesLike, user: AddressLike, permissionType: BigNumberish],
    [void],
    "nonpayable"
  >;

  exists: TypedContractMethod<[projectId: BytesLike], [boolean], "view">;

  getAddressKey: TypedContractMethod<
    [projectId: BytesLike, user: AddressLike],
    [string],
    "view"
  >;

  getOwnSubscription: TypedContractMethod<
    [projectId: BytesLike],
    [[boolean, bigint] & { isValid: boolean; endTimestamp: bigint }],
    "view"
  >;

  getPaymentDetailsByChain: TypedContractMethod<
    [projectId: BytesLike, domainId: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        beneficiary: string;
        pricingTokenAddress: string;
        pricePerSecond: bigint;
        streamsCount: bigint;
      }
    ],
    "view"
  >;

  getPermission: TypedContractMethod<
    [projectId: BytesLike, user: AddressLike],
    [IProjectRegistryV1.PermissionStructOutput],
    "view"
  >;

  getProject: TypedContractMethod<
    [id: BytesLike, domainIds: BigNumberish[]],
    [
      [
        IProjectRegistryV1.PaymentDetailsByChainStructOutput[],
        bigint,
        string,
        string[]
      ] & {
        paymentDetails: IProjectRegistryV1.PaymentDetailsByChainStructOutput[];
        minimumSubscriptionSeconds: bigint;
        metadata: string;
        streams: string[];
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSubscription: TypedContractMethod<
    [projectId: BytesLike, subscriber: AddressLike],
    [[boolean, bigint] & { isValid: boolean; endTimestamp: bigint }],
    "view"
  >;

  getTrustedRole: TypedContractMethod<[], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantSubscription: TypedContractMethod<
    [
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  hasPermissionType: TypedContractMethod<
    [projectId: BytesLike, user: AddressLike, permissionType: BigNumberish],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasValidSubscription: TypedContractMethod<
    [projectId: BytesLike, subscriber: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_streamRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  isDeleted: TypedContractMethod<[projectId: BytesLike], [boolean], "view">;

  isStreamAdded: TypedContractMethod<
    [projectId: BytesLike, streamId: string],
    [boolean],
    "view"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  projects: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, bigint] & {
        id: string;
        minimumSubscriptionSeconds: bigint;
        metadata: string;
        state: bigint;
      }
    ],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeStream: TypedContractMethod<
    [projectId: BytesLike, streamId: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAllPermissionsForUser: TypedContractMethod<
    [projectId: BytesLike, user: AddressLike],
    [void],
    "nonpayable"
  >;

  revokePermissionType: TypedContractMethod<
    [projectId: BytesLike, user: AddressLike, permissionType: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setPermissionBooleans: TypedContractMethod<
    [
      projectId: BytesLike,
      user: AddressLike,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean
    ],
    [void],
    "nonpayable"
  >;

  setPermissionsForMultipleProjects: TypedContractMethod<
    [
      projectIds: BytesLike[],
      users: AddressLike[][],
      permissions: IProjectRegistryV1.PermissionStruct[][]
    ],
    [void],
    "nonpayable"
  >;

  setPermissionsForMultipleUsers: TypedContractMethod<
    [
      projectId: BytesLike,
      users: AddressLike[],
      permissions: IProjectRegistryV1.PermissionStruct[]
    ],
    [void],
    "nonpayable"
  >;

  setStreams: TypedContractMethod<
    [projectId: BytesLike, newStreams: string[]],
    [void],
    "nonpayable"
  >;

  streamRegistry: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferAllPermissionsToUser: TypedContractMethod<
    [projectId: BytesLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPermissionType: TypedContractMethod<
    [
      projectId: BytesLike,
      recipient: AddressLike,
      permissionType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  trustedCreateProject: TypedContractMethod<
    [
      id: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      user: AddressLike,
      isPublicPurchable: boolean,
      metadataJsonString: string
    ],
    [void],
    "nonpayable"
  >;

  trustedSetPermissions: TypedContractMethod<
    [
      projectId: BytesLike,
      user: AddressLike,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean
    ],
    [void],
    "nonpayable"
  >;

  trustedSetPermissionsForMultipleProjects: TypedContractMethod<
    [
      projectIds: BytesLike[],
      users: AddressLike[],
      permissions: IProjectRegistryV1.PermissionStruct[]
    ],
    [void],
    "nonpayable"
  >;

  updatePaymentDetailsByChain: TypedContractMethod<
    [
      projectId: BytesLike,
      domainId: BigNumberish,
      beneficiary: AddressLike,
      pricingToken: AddressLike,
      pricePerSecond: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateProject: TypedContractMethod<
    [
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      metadataJsonString: string
    ],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRUSTED_FORWARDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRUSTED_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addStream"
  ): TypedContractMethod<
    [projectId: BytesLike, streamId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addStreams"
  ): TypedContractMethod<
    [projectId: BytesLike, streamIds: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canBuyProject"
  ): TypedContractMethod<
    [projectId: BytesLike, buyer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      isPublicPurchable: boolean,
      metadataJsonString: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteProject"
  ): TypedContractMethod<[projectId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enablePermissionType"
  ): TypedContractMethod<
    [projectId: BytesLike, user: AddressLike, permissionType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[projectId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAddressKey"
  ): TypedContractMethod<
    [projectId: BytesLike, user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnSubscription"
  ): TypedContractMethod<
    [projectId: BytesLike],
    [[boolean, bigint] & { isValid: boolean; endTimestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentDetailsByChain"
  ): TypedContractMethod<
    [projectId: BytesLike, domainId: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        beneficiary: string;
        pricingTokenAddress: string;
        pricePerSecond: bigint;
        streamsCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermission"
  ): TypedContractMethod<
    [projectId: BytesLike, user: AddressLike],
    [IProjectRegistryV1.PermissionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProject"
  ): TypedContractMethod<
    [id: BytesLike, domainIds: BigNumberish[]],
    [
      [
        IProjectRegistryV1.PaymentDetailsByChainStructOutput[],
        bigint,
        string,
        string[]
      ] & {
        paymentDetails: IProjectRegistryV1.PaymentDetailsByChainStructOutput[];
        minimumSubscriptionSeconds: bigint;
        metadata: string;
        streams: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [projectId: BytesLike, subscriber: AddressLike],
    [[boolean, bigint] & { isValid: boolean; endTimestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrustedRole"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantSubscription"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      subscriptionSeconds: BigNumberish,
      subscriber: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasPermissionType"
  ): TypedContractMethod<
    [projectId: BytesLike, user: AddressLike, permissionType: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasValidSubscription"
  ): TypedContractMethod<
    [projectId: BytesLike, subscriber: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_streamRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isDeleted"
  ): TypedContractMethod<[projectId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isStreamAdded"
  ): TypedContractMethod<
    [projectId: BytesLike, streamId: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, bigint] & {
        id: string;
        minimumSubscriptionSeconds: bigint;
        metadata: string;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeStream"
  ): TypedContractMethod<
    [projectId: BytesLike, streamId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAllPermissionsForUser"
  ): TypedContractMethod<
    [projectId: BytesLike, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokePermissionType"
  ): TypedContractMethod<
    [projectId: BytesLike, user: AddressLike, permissionType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermissionBooleans"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      user: AddressLike,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermissionsForMultipleProjects"
  ): TypedContractMethod<
    [
      projectIds: BytesLike[],
      users: AddressLike[][],
      permissions: IProjectRegistryV1.PermissionStruct[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermissionsForMultipleUsers"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      users: AddressLike[],
      permissions: IProjectRegistryV1.PermissionStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStreams"
  ): TypedContractMethod<
    [projectId: BytesLike, newStreams: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "streamRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferAllPermissionsToUser"
  ): TypedContractMethod<
    [projectId: BytesLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferPermissionType"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      recipient: AddressLike,
      permissionType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustedCreateProject"
  ): TypedContractMethod<
    [
      id: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      user: AddressLike,
      isPublicPurchable: boolean,
      metadataJsonString: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustedSetPermissions"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      user: AddressLike,
      canBuy: boolean,
      deletePerm: boolean,
      canEdit: boolean,
      canGrant: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustedSetPermissionsForMultipleProjects"
  ): TypedContractMethod<
    [
      projectIds: BytesLike[],
      users: AddressLike[],
      permissions: IProjectRegistryV1.PermissionStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePaymentDetailsByChain"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      domainId: BigNumberish,
      beneficiary: AddressLike,
      pricingToken: AddressLike,
      pricePerSecond: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProject"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      domainIds: BigNumberish[],
      paymentDetailsByChain: IProjectRegistryV1.PaymentDetailsByChainStruct[],
      streams: string[],
      minimumSubscriptionSeconds: BigNumberish,
      metadataJsonString: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewSubscription"
  ): TypedContractEvent<
    NewSubscriptionEvent.InputTuple,
    NewSubscriptionEvent.OutputTuple,
    NewSubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "PaymentDetailsByChainUpdated"
  ): TypedContractEvent<
    PaymentDetailsByChainUpdatedEvent.InputTuple,
    PaymentDetailsByChainUpdatedEvent.OutputTuple,
    PaymentDetailsByChainUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionUpdated"
  ): TypedContractEvent<
    PermissionUpdatedEvent.InputTuple,
    PermissionUpdatedEvent.OutputTuple,
    PermissionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectDeleted"
  ): TypedContractEvent<
    ProjectDeletedEvent.InputTuple,
    ProjectDeletedEvent.OutputTuple,
    ProjectDeletedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectUpdated"
  ): TypedContractEvent<
    ProjectUpdatedEvent.InputTuple,
    ProjectUpdatedEvent.OutputTuple,
    ProjectUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StreamAdded"
  ): TypedContractEvent<
    StreamAddedEvent.InputTuple,
    StreamAddedEvent.OutputTuple,
    StreamAddedEvent.OutputObject
  >;
  getEvent(
    key: "StreamRemoved"
  ): TypedContractEvent<
    StreamRemovedEvent.InputTuple,
    StreamRemovedEvent.OutputTuple,
    StreamRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionExtended"
  ): TypedContractEvent<
    SubscriptionExtendedEvent.InputTuple,
    SubscriptionExtendedEvent.OutputTuple,
    SubscriptionExtendedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewSubscription(bytes32,address,uint256)": TypedContractEvent<
      NewSubscriptionEvent.InputTuple,
      NewSubscriptionEvent.OutputTuple,
      NewSubscriptionEvent.OutputObject
    >;
    NewSubscription: TypedContractEvent<
      NewSubscriptionEvent.InputTuple,
      NewSubscriptionEvent.OutputTuple,
      NewSubscriptionEvent.OutputObject
    >;

    "PaymentDetailsByChainUpdated(bytes32,uint32,address,address,uint256)": TypedContractEvent<
      PaymentDetailsByChainUpdatedEvent.InputTuple,
      PaymentDetailsByChainUpdatedEvent.OutputTuple,
      PaymentDetailsByChainUpdatedEvent.OutputObject
    >;
    PaymentDetailsByChainUpdated: TypedContractEvent<
      PaymentDetailsByChainUpdatedEvent.InputTuple,
      PaymentDetailsByChainUpdatedEvent.OutputTuple,
      PaymentDetailsByChainUpdatedEvent.OutputObject
    >;

    "PermissionUpdated(bytes32,address,bool,bool,bool,bool)": TypedContractEvent<
      PermissionUpdatedEvent.InputTuple,
      PermissionUpdatedEvent.OutputTuple,
      PermissionUpdatedEvent.OutputObject
    >;
    PermissionUpdated: TypedContractEvent<
      PermissionUpdatedEvent.InputTuple,
      PermissionUpdatedEvent.OutputTuple,
      PermissionUpdatedEvent.OutputObject
    >;

    "ProjectCreated(bytes32,uint32[],tuple[],string[],uint256,string)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectDeleted(bytes32)": TypedContractEvent<
      ProjectDeletedEvent.InputTuple,
      ProjectDeletedEvent.OutputTuple,
      ProjectDeletedEvent.OutputObject
    >;
    ProjectDeleted: TypedContractEvent<
      ProjectDeletedEvent.InputTuple,
      ProjectDeletedEvent.OutputTuple,
      ProjectDeletedEvent.OutputObject
    >;

    "ProjectUpdated(bytes32,uint32[],tuple[],string[],uint256,string)": TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;
    ProjectUpdated: TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StreamAdded(bytes32,string)": TypedContractEvent<
      StreamAddedEvent.InputTuple,
      StreamAddedEvent.OutputTuple,
      StreamAddedEvent.OutputObject
    >;
    StreamAdded: TypedContractEvent<
      StreamAddedEvent.InputTuple,
      StreamAddedEvent.OutputTuple,
      StreamAddedEvent.OutputObject
    >;

    "StreamRemoved(bytes32,string)": TypedContractEvent<
      StreamRemovedEvent.InputTuple,
      StreamRemovedEvent.OutputTuple,
      StreamRemovedEvent.OutputObject
    >;
    StreamRemoved: TypedContractEvent<
      StreamRemovedEvent.InputTuple,
      StreamRemovedEvent.OutputTuple,
      StreamRemovedEvent.OutputObject
    >;

    "Subscribed(bytes32,address,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "SubscriptionExtended(bytes32,address,uint256)": TypedContractEvent<
      SubscriptionExtendedEvent.InputTuple,
      SubscriptionExtendedEvent.OutputTuple,
      SubscriptionExtendedEvent.OutputObject
    >;
    SubscriptionExtended: TypedContractEvent<
      SubscriptionExtendedEvent.InputTuple,
      SubscriptionExtendedEvent.OutputTuple,
      SubscriptionExtendedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
