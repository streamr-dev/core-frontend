schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Delegation {
  id: ID!
  operator: Operator
  delegator: String!
  """Pool tokens held by a delegator in this Operator contract"""
  poolTokenWei: BigInt!
}

input Delegation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  operator: String
  operator_not: String
  operator_gt: String
  operator_lt: String
  operator_gte: String
  operator_lte: String
  operator_in: [String!]
  operator_not_in: [String!]
  operator_contains: String
  operator_contains_nocase: String
  operator_not_contains: String
  operator_not_contains_nocase: String
  operator_starts_with: String
  operator_starts_with_nocase: String
  operator_not_starts_with: String
  operator_not_starts_with_nocase: String
  operator_ends_with: String
  operator_ends_with_nocase: String
  operator_not_ends_with: String
  operator_not_ends_with_nocase: String
  operator_: Operator_filter
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  poolTokenWei: BigInt
  poolTokenWei_not: BigInt
  poolTokenWei_gt: BigInt
  poolTokenWei_lt: BigInt
  poolTokenWei_gte: BigInt
  poolTokenWei_lte: BigInt
  poolTokenWei_in: [BigInt!]
  poolTokenWei_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Delegation_filter]
  or: [Delegation_filter]
}

enum Delegation_orderBy {
  id
  operator
  operator__id
  operator__delegatorCount
  operator__poolValue
  operator__totalValueInSponsorshipsWei
  operator__freeFundsWei
  operator__poolValueTimestamp
  operator__poolValueBlockNumber
  operator__poolTokenTotalSupplyWei
  operator__exchangeRate
  operator__metadataJsonString
  operator__owner
  delegator
  poolTokenWei
}

type Flag {
  id: ID!
  flagger: Operator!
  target: Operator!
  date: BigInt
  sponsorship: Sponsorship
  result: BigInt!
  targetSlashAmount: BigInt
}

input Flag_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  flagger: String
  flagger_not: String
  flagger_gt: String
  flagger_lt: String
  flagger_gte: String
  flagger_lte: String
  flagger_in: [String!]
  flagger_not_in: [String!]
  flagger_contains: String
  flagger_contains_nocase: String
  flagger_not_contains: String
  flagger_not_contains_nocase: String
  flagger_starts_with: String
  flagger_starts_with_nocase: String
  flagger_not_starts_with: String
  flagger_not_starts_with_nocase: String
  flagger_ends_with: String
  flagger_ends_with_nocase: String
  flagger_not_ends_with: String
  flagger_not_ends_with_nocase: String
  flagger_: Operator_filter
  target: String
  target_not: String
  target_gt: String
  target_lt: String
  target_gte: String
  target_lte: String
  target_in: [String!]
  target_not_in: [String!]
  target_contains: String
  target_contains_nocase: String
  target_not_contains: String
  target_not_contains_nocase: String
  target_starts_with: String
  target_starts_with_nocase: String
  target_not_starts_with: String
  target_not_starts_with_nocase: String
  target_ends_with: String
  target_ends_with_nocase: String
  target_not_ends_with: String
  target_not_ends_with_nocase: String
  target_: Operator_filter
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  sponsorship: String
  sponsorship_not: String
  sponsorship_gt: String
  sponsorship_lt: String
  sponsorship_gte: String
  sponsorship_lte: String
  sponsorship_in: [String!]
  sponsorship_not_in: [String!]
  sponsorship_contains: String
  sponsorship_contains_nocase: String
  sponsorship_not_contains: String
  sponsorship_not_contains_nocase: String
  sponsorship_starts_with: String
  sponsorship_starts_with_nocase: String
  sponsorship_not_starts_with: String
  sponsorship_not_starts_with_nocase: String
  sponsorship_ends_with: String
  sponsorship_ends_with_nocase: String
  sponsorship_not_ends_with: String
  sponsorship_not_ends_with_nocase: String
  sponsorship_: Sponsorship_filter
  result: BigInt
  result_not: BigInt
  result_gt: BigInt
  result_lt: BigInt
  result_gte: BigInt
  result_lte: BigInt
  result_in: [BigInt!]
  result_not_in: [BigInt!]
  targetSlashAmount: BigInt
  targetSlashAmount_not: BigInt
  targetSlashAmount_gt: BigInt
  targetSlashAmount_lt: BigInt
  targetSlashAmount_gte: BigInt
  targetSlashAmount_lte: BigInt
  targetSlashAmount_in: [BigInt!]
  targetSlashAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Flag_filter]
  or: [Flag_filter]
}

enum Flag_orderBy {
  id
  flagger
  flagger__id
  flagger__delegatorCount
  flagger__poolValue
  flagger__totalValueInSponsorshipsWei
  flagger__freeFundsWei
  flagger__poolValueTimestamp
  flagger__poolValueBlockNumber
  flagger__poolTokenTotalSupplyWei
  flagger__exchangeRate
  flagger__metadataJsonString
  flagger__owner
  target
  target__id
  target__delegatorCount
  target__poolValue
  target__totalValueInSponsorshipsWei
  target__freeFundsWei
  target__poolValueTimestamp
  target__poolValueBlockNumber
  target__poolTokenTotalSupplyWei
  target__exchangeRate
  target__metadataJsonString
  target__owner
  date
  sponsorship
  sponsorship__id
  sponsorship__metadata
  sponsorship__isRunning
  sponsorship__totalPayoutWeiPerSec
  sponsorship__operatorCount
  sponsorship__totalStakedWei
  sponsorship__unallocatedWei
  sponsorship__projectedInsolvency
  sponsorship__creator
  result
  targetSlashAmount
}

type Node {
  """node ID = address"""
  id: ID!
  """Connection metadata, e.g. URL of the node, e.g. http://mynode.com:3000"""
  metadata: String!
  """Epoch timestamp of the last time the node metadata was updated"""
  lastSeen: BigInt!
  """
  Streams for which this node is registered as a storage node in the StreamStorageRegistry
  """
  storedStreams(skip: Int = 0, first: Int = 100, orderBy: Stream_orderBy, orderDirection: OrderDirection, where: Stream_filter): [Stream!]
  """date created. This is a timestamp in seconds"""
  createdAt: BigInt
}

input Node_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  lastSeen: BigInt
  lastSeen_not: BigInt
  lastSeen_gt: BigInt
  lastSeen_lt: BigInt
  lastSeen_gte: BigInt
  lastSeen_lte: BigInt
  lastSeen_in: [BigInt!]
  lastSeen_not_in: [BigInt!]
  storedStreams: [String!]
  storedStreams_not: [String!]
  storedStreams_contains: [String!]
  storedStreams_contains_nocase: [String!]
  storedStreams_not_contains: [String!]
  storedStreams_not_contains_nocase: [String!]
  storedStreams_: Stream_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Node_filter]
  or: [Node_filter]
}

enum Node_orderBy {
  id
  metadata
  lastSeen
  storedStreams
  createdAt
}

type Operator {
  id: ID!
  stakes(skip: Int = 0, first: Int = 100, orderBy: Stake_orderBy, orderDirection: OrderDirection, where: Stake_filter): [Stake!]!
  delegators(skip: Int = 0, first: Int = 100, orderBy: Delegation_orderBy, orderDirection: OrderDirection, where: Delegation_filter): [Delegation!]!
  """
  All delegators who have delegated to this operator. Increased when Delegation is created and decreased when Delegation is removed
  """
  delegatorCount: Int!
  """
  DATA staked, earned and held by the Operator contract = totalValueInSponsorshipsWei + freeFundsWei. Updated by PoolValueUpdate event, so might be out of date.
  """
  poolValue: BigInt!
  """
  DATA staked and earned in sponsorship contracts. Updated by PoolValueUpdate event, so it will be out of date by the amount of earnings.
  """
  totalValueInSponsorshipsWei: BigInt!
  """
  DATA held by the operator, not yet staked. Updated by PoolValueUpdate event, so might be out of date if new DATA is sent via `ERC20.transfer`.
  """
  freeFundsWei: BigInt!
  """
  Timestamp in seconds when poolValue was the best approximation of total DATA staked, earned and held by the Operator contract. Shows how much the poolValue is out of date.
  """
  poolValueTimestamp: BigInt!
  """
  Block number after which poolValue was the best approximation of total DATA staked, earned and held by the Operator contract.
  """
  poolValueBlockNumber: BigInt!
  """Total number of pool tokens in existence"""
  poolTokenTotalSupplyWei: BigInt!
  """
  DATA/pooltoken exchange rate, equal to poolValue / totalSupply. Pool tokens are worth (exchangeRate * amount) DATA when undelegating.
  """
  exchangeRate: BigDecimal!
  metadataJsonString: String!
  owner: String!
  flagsOpened(skip: Int = 0, first: Int = 100, orderBy: Flag_orderBy, orderDirection: OrderDirection, where: Flag_filter): [Flag!]!
  flagsTargeted(skip: Int = 0, first: Int = 100, orderBy: Flag_orderBy, orderDirection: OrderDirection, where: Flag_filter): [Flag!]!
}

type OperatorDailyBucket {
  id: ID!
  operator: Operator!
  """The day of the bucket. This is a timestamp in seconds"""
  date: BigInt!
  """
  DATA staked, earned and held by the Operator contract = totalValueInSponsorshipsWei + freeFundsWei (first event in bucket)
  """
  poolValue: BigInt!
  """
  DATA staked and earned in sponsorship contracts (first event in bucket)
  """
  totalValueInSponsorshipsWei: BigInt!
  """DATA held by the operator, not yet staked (first event in bucket)"""
  freeFundsWei: BigInt!
  """Momentary APY. Currently not used. TODO: calculate and add to subgraph"""
  spotAPY: BigInt!
  """
  All delegators joining this operator. Initialized from operator.delegatorCount
  """
  delegatorCountAtStart: Int!
  """
  Delegators joining this operator on this day. Updated when Delegation entity is created
  """
  delegatorCountChange: Int!
  """
  All DATA tokens delegated to this operator, by all delegators. Updated when Delegated event is fired
  """
  totalDelegatedWei: BigInt!
  """
  Total DATA tokens undelegated from this operator, by all delegators. Updated when Undelegated event is fired
  """
  totalUndelegatedWei: BigInt!
  """Sum of earnings during the bucket, less operator's share"""
  profitsWei: BigInt!
  """Sum of losses during the bucket"""
  lossesWei: BigInt!
  """Sum of operator's share of earnings during the bucket"""
  operatorsShareWei: BigInt!
}

input OperatorDailyBucket_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  operator: String
  operator_not: String
  operator_gt: String
  operator_lt: String
  operator_gte: String
  operator_lte: String
  operator_in: [String!]
  operator_not_in: [String!]
  operator_contains: String
  operator_contains_nocase: String
  operator_not_contains: String
  operator_not_contains_nocase: String
  operator_starts_with: String
  operator_starts_with_nocase: String
  operator_not_starts_with: String
  operator_not_starts_with_nocase: String
  operator_ends_with: String
  operator_ends_with_nocase: String
  operator_not_ends_with: String
  operator_not_ends_with_nocase: String
  operator_: Operator_filter
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  poolValue: BigInt
  poolValue_not: BigInt
  poolValue_gt: BigInt
  poolValue_lt: BigInt
  poolValue_gte: BigInt
  poolValue_lte: BigInt
  poolValue_in: [BigInt!]
  poolValue_not_in: [BigInt!]
  totalValueInSponsorshipsWei: BigInt
  totalValueInSponsorshipsWei_not: BigInt
  totalValueInSponsorshipsWei_gt: BigInt
  totalValueInSponsorshipsWei_lt: BigInt
  totalValueInSponsorshipsWei_gte: BigInt
  totalValueInSponsorshipsWei_lte: BigInt
  totalValueInSponsorshipsWei_in: [BigInt!]
  totalValueInSponsorshipsWei_not_in: [BigInt!]
  freeFundsWei: BigInt
  freeFundsWei_not: BigInt
  freeFundsWei_gt: BigInt
  freeFundsWei_lt: BigInt
  freeFundsWei_gte: BigInt
  freeFundsWei_lte: BigInt
  freeFundsWei_in: [BigInt!]
  freeFundsWei_not_in: [BigInt!]
  spotAPY: BigInt
  spotAPY_not: BigInt
  spotAPY_gt: BigInt
  spotAPY_lt: BigInt
  spotAPY_gte: BigInt
  spotAPY_lte: BigInt
  spotAPY_in: [BigInt!]
  spotAPY_not_in: [BigInt!]
  delegatorCountAtStart: Int
  delegatorCountAtStart_not: Int
  delegatorCountAtStart_gt: Int
  delegatorCountAtStart_lt: Int
  delegatorCountAtStart_gte: Int
  delegatorCountAtStart_lte: Int
  delegatorCountAtStart_in: [Int!]
  delegatorCountAtStart_not_in: [Int!]
  delegatorCountChange: Int
  delegatorCountChange_not: Int
  delegatorCountChange_gt: Int
  delegatorCountChange_lt: Int
  delegatorCountChange_gte: Int
  delegatorCountChange_lte: Int
  delegatorCountChange_in: [Int!]
  delegatorCountChange_not_in: [Int!]
  totalDelegatedWei: BigInt
  totalDelegatedWei_not: BigInt
  totalDelegatedWei_gt: BigInt
  totalDelegatedWei_lt: BigInt
  totalDelegatedWei_gte: BigInt
  totalDelegatedWei_lte: BigInt
  totalDelegatedWei_in: [BigInt!]
  totalDelegatedWei_not_in: [BigInt!]
  totalUndelegatedWei: BigInt
  totalUndelegatedWei_not: BigInt
  totalUndelegatedWei_gt: BigInt
  totalUndelegatedWei_lt: BigInt
  totalUndelegatedWei_gte: BigInt
  totalUndelegatedWei_lte: BigInt
  totalUndelegatedWei_in: [BigInt!]
  totalUndelegatedWei_not_in: [BigInt!]
  profitsWei: BigInt
  profitsWei_not: BigInt
  profitsWei_gt: BigInt
  profitsWei_lt: BigInt
  profitsWei_gte: BigInt
  profitsWei_lte: BigInt
  profitsWei_in: [BigInt!]
  profitsWei_not_in: [BigInt!]
  lossesWei: BigInt
  lossesWei_not: BigInt
  lossesWei_gt: BigInt
  lossesWei_lt: BigInt
  lossesWei_gte: BigInt
  lossesWei_lte: BigInt
  lossesWei_in: [BigInt!]
  lossesWei_not_in: [BigInt!]
  operatorsShareWei: BigInt
  operatorsShareWei_not: BigInt
  operatorsShareWei_gt: BigInt
  operatorsShareWei_lt: BigInt
  operatorsShareWei_gte: BigInt
  operatorsShareWei_lte: BigInt
  operatorsShareWei_in: [BigInt!]
  operatorsShareWei_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OperatorDailyBucket_filter]
  or: [OperatorDailyBucket_filter]
}

enum OperatorDailyBucket_orderBy {
  id
  operator
  operator__id
  operator__delegatorCount
  operator__poolValue
  operator__totalValueInSponsorshipsWei
  operator__freeFundsWei
  operator__poolValueTimestamp
  operator__poolValueBlockNumber
  operator__poolTokenTotalSupplyWei
  operator__exchangeRate
  operator__metadataJsonString
  operator__owner
  date
  poolValue
  totalValueInSponsorshipsWei
  freeFundsWei
  spotAPY
  delegatorCountAtStart
  delegatorCountChange
  totalDelegatedWei
  totalUndelegatedWei
  profitsWei
  lossesWei
  operatorsShareWei
}

input Operator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stakes_: Stake_filter
  delegators_: Delegation_filter
  delegatorCount: Int
  delegatorCount_not: Int
  delegatorCount_gt: Int
  delegatorCount_lt: Int
  delegatorCount_gte: Int
  delegatorCount_lte: Int
  delegatorCount_in: [Int!]
  delegatorCount_not_in: [Int!]
  poolValue: BigInt
  poolValue_not: BigInt
  poolValue_gt: BigInt
  poolValue_lt: BigInt
  poolValue_gte: BigInt
  poolValue_lte: BigInt
  poolValue_in: [BigInt!]
  poolValue_not_in: [BigInt!]
  totalValueInSponsorshipsWei: BigInt
  totalValueInSponsorshipsWei_not: BigInt
  totalValueInSponsorshipsWei_gt: BigInt
  totalValueInSponsorshipsWei_lt: BigInt
  totalValueInSponsorshipsWei_gte: BigInt
  totalValueInSponsorshipsWei_lte: BigInt
  totalValueInSponsorshipsWei_in: [BigInt!]
  totalValueInSponsorshipsWei_not_in: [BigInt!]
  freeFundsWei: BigInt
  freeFundsWei_not: BigInt
  freeFundsWei_gt: BigInt
  freeFundsWei_lt: BigInt
  freeFundsWei_gte: BigInt
  freeFundsWei_lte: BigInt
  freeFundsWei_in: [BigInt!]
  freeFundsWei_not_in: [BigInt!]
  poolValueTimestamp: BigInt
  poolValueTimestamp_not: BigInt
  poolValueTimestamp_gt: BigInt
  poolValueTimestamp_lt: BigInt
  poolValueTimestamp_gte: BigInt
  poolValueTimestamp_lte: BigInt
  poolValueTimestamp_in: [BigInt!]
  poolValueTimestamp_not_in: [BigInt!]
  poolValueBlockNumber: BigInt
  poolValueBlockNumber_not: BigInt
  poolValueBlockNumber_gt: BigInt
  poolValueBlockNumber_lt: BigInt
  poolValueBlockNumber_gte: BigInt
  poolValueBlockNumber_lte: BigInt
  poolValueBlockNumber_in: [BigInt!]
  poolValueBlockNumber_not_in: [BigInt!]
  poolTokenTotalSupplyWei: BigInt
  poolTokenTotalSupplyWei_not: BigInt
  poolTokenTotalSupplyWei_gt: BigInt
  poolTokenTotalSupplyWei_lt: BigInt
  poolTokenTotalSupplyWei_gte: BigInt
  poolTokenTotalSupplyWei_lte: BigInt
  poolTokenTotalSupplyWei_in: [BigInt!]
  poolTokenTotalSupplyWei_not_in: [BigInt!]
  exchangeRate: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_lt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_not_in: [BigDecimal!]
  metadataJsonString: String
  metadataJsonString_not: String
  metadataJsonString_gt: String
  metadataJsonString_lt: String
  metadataJsonString_gte: String
  metadataJsonString_lte: String
  metadataJsonString_in: [String!]
  metadataJsonString_not_in: [String!]
  metadataJsonString_contains: String
  metadataJsonString_contains_nocase: String
  metadataJsonString_not_contains: String
  metadataJsonString_not_contains_nocase: String
  metadataJsonString_starts_with: String
  metadataJsonString_starts_with_nocase: String
  metadataJsonString_not_starts_with: String
  metadataJsonString_not_starts_with_nocase: String
  metadataJsonString_ends_with: String
  metadataJsonString_ends_with_nocase: String
  metadataJsonString_not_ends_with: String
  metadataJsonString_not_ends_with_nocase: String
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  flagsOpened_: Flag_filter
  flagsTargeted_: Flag_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Operator_filter]
  or: [Operator_filter]
}

enum Operator_orderBy {
  id
  stakes
  delegators
  delegatorCount
  poolValue
  totalValueInSponsorshipsWei
  freeFundsWei
  poolValueTimestamp
  poolValueBlockNumber
  poolTokenTotalSupplyWei
  exchangeRate
  metadataJsonString
  owner
  flagsOpened
  flagsTargeted
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Project {
  """project id = bytes32"""
  id: ID!
  """
  List of domain ids for the chains from which this project can be purchased
  """
  domainIds: [BigInt!]!
  """
  Payment details for the chains where the project can be purchased: mapping (uint32 => PaymentDetailsByChain)
  """
  paymentDetails(skip: Int = 0, first: Int = 100, orderBy: ProjectPaymentDetails_orderBy, orderDirection: OrderDirection, where: ProjectPaymentDetails_filter): [ProjectPaymentDetails!]!
  """
  The minimum amount of seconds for which a subscription can be extended. This is a normal int value (not wei)
  """
  minimumSubscriptionSeconds: BigInt!
  """Subscriptions mapping (address => TimeBasedSubscription)"""
  subscriptions(skip: Int = 0, first: Int = 100, orderBy: ProjectSubscription_orderBy, orderDirection: OrderDirection, where: ProjectSubscription_filter): [ProjectSubscription!]!
  """Project metadata JSON"""
  metadata: String!
  """
  Flags a project as being a data union, true iff 'isDataUnion' field is set to 'true' in the metadata JSON
  """
  isDataUnion: Boolean
  """Streams added to the project"""
  streams: [String!]!
  """Permissions mapping (bytes32 => Permission)"""
  permissions(skip: Int = 0, first: Int = 100, orderBy: ProjectPermission_orderBy, orderDirection: OrderDirection, where: ProjectPermission_filter): [ProjectPermission!]!
  """date created. This is a timestamp in seconds"""
  createdAt: BigInt
  """date updated. This is a timestamp in seconds"""
  updatedAt: BigInt
  """Marketplace purchases"""
  purchases(skip: Int = 0, first: Int = 100, orderBy: ProjectPurchase_orderBy, orderDirection: OrderDirection, where: ProjectPurchase_filter): [ProjectPurchase!]!
  """
  Incremented/decremented when Stake/Unstake events are fired. It may not always be 1:1 with the stake (with future implementations)
  """
  score: BigInt!
  """Total tokens staked in the project by all stakers"""
  stakedWei: BigInt!
  """
  Increases when various actions are triggered (e.g. purchase, stake, unstake). Used to generate unique ids
  """
  counter: Int
}

type ProjectPaymentDetails {
  """payment details id = projectId + '-' + domainId"""
  id: ID!
  """Target project this payment details applies to"""
  project: Project!
  """
  The domainId of the chain where the project can be purchased. It's a unique id assigned by hyperlane to each chain
  """
  domainId: BigInt
  """
  Ethereum address, account where the payment is directed to for project purchases
  """
  beneficiary: Bytes!
  """
  Ethereum address, the token in which the payment goes to project beneficiary
  """
  pricingTokenAddress: Bytes!
  """
  Project price per second. This is a DATA-wei denominated amount (10^18th of DATA token).
  """
  pricePerSecond: BigInt
}

input ProjectPaymentDetails_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  domainId: BigInt
  domainId_not: BigInt
  domainId_gt: BigInt
  domainId_lt: BigInt
  domainId_gte: BigInt
  domainId_lte: BigInt
  domainId_in: [BigInt!]
  domainId_not_in: [BigInt!]
  beneficiary: Bytes
  beneficiary_not: Bytes
  beneficiary_gt: Bytes
  beneficiary_lt: Bytes
  beneficiary_gte: Bytes
  beneficiary_lte: Bytes
  beneficiary_in: [Bytes!]
  beneficiary_not_in: [Bytes!]
  beneficiary_contains: Bytes
  beneficiary_not_contains: Bytes
  pricingTokenAddress: Bytes
  pricingTokenAddress_not: Bytes
  pricingTokenAddress_gt: Bytes
  pricingTokenAddress_lt: Bytes
  pricingTokenAddress_gte: Bytes
  pricingTokenAddress_lte: Bytes
  pricingTokenAddress_in: [Bytes!]
  pricingTokenAddress_not_in: [Bytes!]
  pricingTokenAddress_contains: Bytes
  pricingTokenAddress_not_contains: Bytes
  pricePerSecond: BigInt
  pricePerSecond_not: BigInt
  pricePerSecond_gt: BigInt
  pricePerSecond_lt: BigInt
  pricePerSecond_gte: BigInt
  pricePerSecond_lte: BigInt
  pricePerSecond_in: [BigInt!]
  pricePerSecond_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProjectPaymentDetails_filter]
  or: [ProjectPaymentDetails_filter]
}

enum ProjectPaymentDetails_orderBy {
  id
  project
  project__id
  project__minimumSubscriptionSeconds
  project__metadata
  project__isDataUnion
  project__createdAt
  project__updatedAt
  project__score
  project__stakedWei
  project__counter
  domainId
  beneficiary
  pricingTokenAddress
  pricePerSecond
}

type ProjectPermission {
  """permission id = projectId + '-' + userAddress"""
  id: ID!
  """Ethereum address, owner of this permission"""
  userAddress: Bytes!
  """Target project this permission applies to"""
  project: Project!
  """canBuy permission enables a user to buy the project"""
  canBuy: Boolean
  """
  canDelete permission allows deleting the project from the ProjectRegistry
  """
  canDelete: Boolean
  """canEdit permission enables changing the project's fields"""
  canEdit: Boolean
  """
  canGrant permission allows granting and revoking permissions to this project
  """
  canGrant: Boolean
}

input ProjectPermission_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: Bytes
  userAddress_not: Bytes
  userAddress_gt: Bytes
  userAddress_lt: Bytes
  userAddress_gte: Bytes
  userAddress_lte: Bytes
  userAddress_in: [Bytes!]
  userAddress_not_in: [Bytes!]
  userAddress_contains: Bytes
  userAddress_not_contains: Bytes
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  canBuy: Boolean
  canBuy_not: Boolean
  canBuy_in: [Boolean!]
  canBuy_not_in: [Boolean!]
  canDelete: Boolean
  canDelete_not: Boolean
  canDelete_in: [Boolean!]
  canDelete_not_in: [Boolean!]
  canEdit: Boolean
  canEdit_not: Boolean
  canEdit_in: [Boolean!]
  canEdit_not_in: [Boolean!]
  canGrant: Boolean
  canGrant_not: Boolean
  canGrant_in: [Boolean!]
  canGrant_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProjectPermission_filter]
  or: [ProjectPermission_filter]
}

enum ProjectPermission_orderBy {
  id
  userAddress
  project
  project__id
  project__minimumSubscriptionSeconds
  project__metadata
  project__isDataUnion
  project__createdAt
  project__updatedAt
  project__score
  project__stakedWei
  project__counter
  canBuy
  canDelete
  canEdit
  canGrant
}

type ProjectPurchase {
  """
  project purchase id = projectId + '-' + subscriberAddress + '-' + counter
  """
  id: ID!
  """Target project this purchase is for"""
  project: Project!
  """Ethereum address, the account initiating the project purchase"""
  subscriber: Bytes!
  """The amount of seconds by which the subscription is extended"""
  subscriptionSeconds: BigInt!
  """The amount of tokens paid to beneficiary for project subscription"""
  price: BigInt!
  """The amount of tokens paid to marketplace for project subscription"""
  fee: BigInt!
  """purchase date. This is a timestamp in seconds"""
  purchasedAt: BigInt
}

input ProjectPurchase_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  subscriber: Bytes
  subscriber_not: Bytes
  subscriber_gt: Bytes
  subscriber_lt: Bytes
  subscriber_gte: Bytes
  subscriber_lte: Bytes
  subscriber_in: [Bytes!]
  subscriber_not_in: [Bytes!]
  subscriber_contains: Bytes
  subscriber_not_contains: Bytes
  subscriptionSeconds: BigInt
  subscriptionSeconds_not: BigInt
  subscriptionSeconds_gt: BigInt
  subscriptionSeconds_lt: BigInt
  subscriptionSeconds_gte: BigInt
  subscriptionSeconds_lte: BigInt
  subscriptionSeconds_in: [BigInt!]
  subscriptionSeconds_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  purchasedAt: BigInt
  purchasedAt_not: BigInt
  purchasedAt_gt: BigInt
  purchasedAt_lt: BigInt
  purchasedAt_gte: BigInt
  purchasedAt_lte: BigInt
  purchasedAt_in: [BigInt!]
  purchasedAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProjectPurchase_filter]
  or: [ProjectPurchase_filter]
}

enum ProjectPurchase_orderBy {
  id
  project
  project__id
  project__minimumSubscriptionSeconds
  project__metadata
  project__isDataUnion
  project__createdAt
  project__updatedAt
  project__score
  project__stakedWei
  project__counter
  subscriber
  subscriptionSeconds
  price
  fee
  purchasedAt
}

type ProjectStakeByUser {
  """stake id = projectId + '-' + userAddress"""
  id: ID!
  """Target project this stake is for"""
  project: Project!
  """Ethereum address, the account initiating the stake"""
  user: Bytes!
  """All tokens staked by a given user"""
  userStake: BigInt!
}

input ProjectStakeByUser_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  userStake: BigInt
  userStake_not: BigInt
  userStake_gt: BigInt
  userStake_lt: BigInt
  userStake_gte: BigInt
  userStake_lte: BigInt
  userStake_in: [BigInt!]
  userStake_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProjectStakeByUser_filter]
  or: [ProjectStakeByUser_filter]
}

enum ProjectStakeByUser_orderBy {
  id
  project
  project__id
  project__minimumSubscriptionSeconds
  project__metadata
  project__isDataUnion
  project__createdAt
  project__updatedAt
  project__score
  project__stakedWei
  project__counter
  user
  userStake
}

type ProjectStakingDayBucket {
  """bucket id = projectId + '-' + date"""
  id: ID!
  """Target project this stake is for"""
  project: Project!
  """The day of the bucket"""
  date: BigInt!
  """The amount of tokens staked when the bucket starts"""
  stakeAtStart: BigInt!
  """The amount of tokens staked/unstaked on this day"""
  stakeChange: BigInt!
  """The amount of tokens staked on this day"""
  stakingsWei: BigInt!
  """The amount of tokens unstaked on this day"""
  unstakingsWei: BigInt!
}

input ProjectStakingDayBucket_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  stakeAtStart: BigInt
  stakeAtStart_not: BigInt
  stakeAtStart_gt: BigInt
  stakeAtStart_lt: BigInt
  stakeAtStart_gte: BigInt
  stakeAtStart_lte: BigInt
  stakeAtStart_in: [BigInt!]
  stakeAtStart_not_in: [BigInt!]
  stakeChange: BigInt
  stakeChange_not: BigInt
  stakeChange_gt: BigInt
  stakeChange_lt: BigInt
  stakeChange_gte: BigInt
  stakeChange_lte: BigInt
  stakeChange_in: [BigInt!]
  stakeChange_not_in: [BigInt!]
  stakingsWei: BigInt
  stakingsWei_not: BigInt
  stakingsWei_gt: BigInt
  stakingsWei_lt: BigInt
  stakingsWei_gte: BigInt
  stakingsWei_lte: BigInt
  stakingsWei_in: [BigInt!]
  stakingsWei_not_in: [BigInt!]
  unstakingsWei: BigInt
  unstakingsWei_not: BigInt
  unstakingsWei_gt: BigInt
  unstakingsWei_lt: BigInt
  unstakingsWei_gte: BigInt
  unstakingsWei_lte: BigInt
  unstakingsWei_in: [BigInt!]
  unstakingsWei_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProjectStakingDayBucket_filter]
  or: [ProjectStakingDayBucket_filter]
}

enum ProjectStakingDayBucket_orderBy {
  id
  project
  project__id
  project__minimumSubscriptionSeconds
  project__metadata
  project__isDataUnion
  project__createdAt
  project__updatedAt
  project__score
  project__stakedWei
  project__counter
  date
  stakeAtStart
  stakeChange
  stakingsWei
  unstakingsWei
}

type ProjectSubscription {
  """subscription id = projectId + '-' + subscriberAddress"""
  id: ID!
  """Target project this permission applies to"""
  project: Project!
  """Ethereum address, owner of this subscription"""
  userAddress: Bytes!
  """Subscription expiration time. This is a timestamp in seconds"""
  endTimestamp: BigInt
}

input ProjectSubscription_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  userAddress: Bytes
  userAddress_not: Bytes
  userAddress_gt: Bytes
  userAddress_lt: Bytes
  userAddress_gte: Bytes
  userAddress_lte: Bytes
  userAddress_in: [Bytes!]
  userAddress_not_in: [Bytes!]
  userAddress_contains: Bytes
  userAddress_not_contains: Bytes
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProjectSubscription_filter]
  or: [ProjectSubscription_filter]
}

enum ProjectSubscription_orderBy {
  id
  project
  project__id
  project__minimumSubscriptionSeconds
  project__metadata
  project__isDataUnion
  project__createdAt
  project__updatedAt
  project__score
  project__stakedWei
  project__counter
  userAddress
  endTimestamp
}

input Project_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domainIds: [BigInt!]
  domainIds_not: [BigInt!]
  domainIds_contains: [BigInt!]
  domainIds_contains_nocase: [BigInt!]
  domainIds_not_contains: [BigInt!]
  domainIds_not_contains_nocase: [BigInt!]
  paymentDetails: [String!]
  paymentDetails_not: [String!]
  paymentDetails_contains: [String!]
  paymentDetails_contains_nocase: [String!]
  paymentDetails_not_contains: [String!]
  paymentDetails_not_contains_nocase: [String!]
  paymentDetails_: ProjectPaymentDetails_filter
  minimumSubscriptionSeconds: BigInt
  minimumSubscriptionSeconds_not: BigInt
  minimumSubscriptionSeconds_gt: BigInt
  minimumSubscriptionSeconds_lt: BigInt
  minimumSubscriptionSeconds_gte: BigInt
  minimumSubscriptionSeconds_lte: BigInt
  minimumSubscriptionSeconds_in: [BigInt!]
  minimumSubscriptionSeconds_not_in: [BigInt!]
  subscriptions: [String!]
  subscriptions_not: [String!]
  subscriptions_contains: [String!]
  subscriptions_contains_nocase: [String!]
  subscriptions_not_contains: [String!]
  subscriptions_not_contains_nocase: [String!]
  subscriptions_: ProjectSubscription_filter
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  isDataUnion: Boolean
  isDataUnion_not: Boolean
  isDataUnion_in: [Boolean!]
  isDataUnion_not_in: [Boolean!]
  streams: [String!]
  streams_not: [String!]
  streams_contains: [String!]
  streams_contains_nocase: [String!]
  streams_not_contains: [String!]
  streams_not_contains_nocase: [String!]
  permissions: [String!]
  permissions_not: [String!]
  permissions_contains: [String!]
  permissions_contains_nocase: [String!]
  permissions_not_contains: [String!]
  permissions_not_contains_nocase: [String!]
  permissions_: ProjectPermission_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  purchases: [String!]
  purchases_not: [String!]
  purchases_contains: [String!]
  purchases_contains_nocase: [String!]
  purchases_not_contains: [String!]
  purchases_not_contains_nocase: [String!]
  purchases_: ProjectPurchase_filter
  score: BigInt
  score_not: BigInt
  score_gt: BigInt
  score_lt: BigInt
  score_gte: BigInt
  score_lte: BigInt
  score_in: [BigInt!]
  score_not_in: [BigInt!]
  stakedWei: BigInt
  stakedWei_not: BigInt
  stakedWei_gt: BigInt
  stakedWei_lt: BigInt
  stakedWei_gte: BigInt
  stakedWei_lte: BigInt
  stakedWei_in: [BigInt!]
  stakedWei_not_in: [BigInt!]
  counter: Int
  counter_not: Int
  counter_gt: Int
  counter_lt: Int
  counter_gte: Int
  counter_lte: Int
  counter_in: [Int!]
  counter_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Project_filter]
  or: [Project_filter]
}

enum Project_orderBy {
  id
  domainIds
  paymentDetails
  minimumSubscriptionSeconds
  subscriptions
  metadata
  isDataUnion
  streams
  permissions
  createdAt
  updatedAt
  purchases
  score
  stakedWei
  counter
}

type Query {
  streamPermission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StreamPermission
  streamPermissions(
    skip: Int = 0
    first: Int = 100
    orderBy: StreamPermission_orderBy
    orderDirection: OrderDirection
    where: StreamPermission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StreamPermission!]!
  stream(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stream
  streams(
    skip: Int = 0
    first: Int = 100
    orderBy: Stream_orderBy
    orderDirection: OrderDirection
    where: Stream_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stream!]!
  node(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Node
  nodes(
    skip: Int = 0
    first: Int = 100
    orderBy: Node_orderBy
    orderDirection: OrderDirection
    where: Node_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Node!]!
  projectPermission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectPermission
  projectPermissions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectPermission_orderBy
    orderDirection: OrderDirection
    where: ProjectPermission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectPermission!]!
  projectPaymentDetails(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectPaymentDetails_orderBy
    orderDirection: OrderDirection
    where: ProjectPaymentDetails_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectPaymentDetails!]!
  projectSubscription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectSubscription
  projectSubscriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectSubscription_orderBy
    orderDirection: OrderDirection
    where: ProjectSubscription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectSubscription!]!
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  projectPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectPurchase
  projectPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectPurchase_orderBy
    orderDirection: OrderDirection
    where: ProjectPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectPurchase!]!
  projectStakeByUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectStakeByUser
  projectStakeByUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectStakeByUser_orderBy
    orderDirection: OrderDirection
    where: ProjectStakeByUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectStakeByUser!]!
  projectStakingDayBucket(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectStakingDayBucket
  projectStakingDayBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectStakingDayBucket_orderBy
    orderDirection: OrderDirection
    where: ProjectStakingDayBucket_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectStakingDayBucket!]!
  operator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Operator
  operators(
    skip: Int = 0
    first: Int = 100
    orderBy: Operator_orderBy
    orderDirection: OrderDirection
    where: Operator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Operator!]!
  operatorDailyBucket(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatorDailyBucket
  operatorDailyBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatorDailyBucket_orderBy
    orderDirection: OrderDirection
    where: OperatorDailyBucket_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatorDailyBucket!]!
  delegation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegation
  delegations(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegation_orderBy
    orderDirection: OrderDirection
    where: Delegation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegation!]!
  sponsorship(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sponsorship
  sponsorships(
    skip: Int = 0
    first: Int = 100
    orderBy: Sponsorship_orderBy
    orderDirection: OrderDirection
    where: Sponsorship_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sponsorship!]!
  sponsorshipDailyBucket(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SponsorshipDailyBucket
  sponsorshipDailyBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: SponsorshipDailyBucket_orderBy
    orderDirection: OrderDirection
    where: SponsorshipDailyBucket_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SponsorshipDailyBucket!]!
  stake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stake
  stakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Stake_orderBy
    orderDirection: OrderDirection
    where: Stake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stake!]!
  flag(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Flag
  flags(
    skip: Int = 0
    first: Int = 100
    orderBy: Flag_orderBy
    orderDirection: OrderDirection
    where: Flag_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Flag!]!
  projectSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Sponsorship {
  id: ID!
  stream: Stream
  metadata: String
  isRunning: Boolean!
  totalPayoutWeiPerSec: BigInt!
  stakes(skip: Int = 0, first: Int = 100, orderBy: Stake_orderBy, orderDirection: OrderDirection, where: Stake_filter): [Stake!]!
  operatorCount: Int!
  totalStakedWei: BigInt!
  unallocatedWei: BigInt!
  projectedInsolvency: BigInt!
  flags(skip: Int = 0, first: Int = 100, orderBy: Flag_orderBy, orderDirection: OrderDirection, where: Flag_filter): [Flag!]!
  creator: String!
}

type SponsorshipDailyBucket {
  id: ID!
  sponsorship: Sponsorship!
  date: BigInt!
  totalStakedWei: BigInt!
  unallocatedWei: BigInt!
  projectedInsolvency: BigInt!
  spotAPY: BigInt!
  totalPayoutsCumulative: BigInt!
  operatorCount: Int!
}

input SponsorshipDailyBucket_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorship: String
  sponsorship_not: String
  sponsorship_gt: String
  sponsorship_lt: String
  sponsorship_gte: String
  sponsorship_lte: String
  sponsorship_in: [String!]
  sponsorship_not_in: [String!]
  sponsorship_contains: String
  sponsorship_contains_nocase: String
  sponsorship_not_contains: String
  sponsorship_not_contains_nocase: String
  sponsorship_starts_with: String
  sponsorship_starts_with_nocase: String
  sponsorship_not_starts_with: String
  sponsorship_not_starts_with_nocase: String
  sponsorship_ends_with: String
  sponsorship_ends_with_nocase: String
  sponsorship_not_ends_with: String
  sponsorship_not_ends_with_nocase: String
  sponsorship_: Sponsorship_filter
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  totalStakedWei: BigInt
  totalStakedWei_not: BigInt
  totalStakedWei_gt: BigInt
  totalStakedWei_lt: BigInt
  totalStakedWei_gte: BigInt
  totalStakedWei_lte: BigInt
  totalStakedWei_in: [BigInt!]
  totalStakedWei_not_in: [BigInt!]
  unallocatedWei: BigInt
  unallocatedWei_not: BigInt
  unallocatedWei_gt: BigInt
  unallocatedWei_lt: BigInt
  unallocatedWei_gte: BigInt
  unallocatedWei_lte: BigInt
  unallocatedWei_in: [BigInt!]
  unallocatedWei_not_in: [BigInt!]
  projectedInsolvency: BigInt
  projectedInsolvency_not: BigInt
  projectedInsolvency_gt: BigInt
  projectedInsolvency_lt: BigInt
  projectedInsolvency_gte: BigInt
  projectedInsolvency_lte: BigInt
  projectedInsolvency_in: [BigInt!]
  projectedInsolvency_not_in: [BigInt!]
  spotAPY: BigInt
  spotAPY_not: BigInt
  spotAPY_gt: BigInt
  spotAPY_lt: BigInt
  spotAPY_gte: BigInt
  spotAPY_lte: BigInt
  spotAPY_in: [BigInt!]
  spotAPY_not_in: [BigInt!]
  totalPayoutsCumulative: BigInt
  totalPayoutsCumulative_not: BigInt
  totalPayoutsCumulative_gt: BigInt
  totalPayoutsCumulative_lt: BigInt
  totalPayoutsCumulative_gte: BigInt
  totalPayoutsCumulative_lte: BigInt
  totalPayoutsCumulative_in: [BigInt!]
  totalPayoutsCumulative_not_in: [BigInt!]
  operatorCount: Int
  operatorCount_not: Int
  operatorCount_gt: Int
  operatorCount_lt: Int
  operatorCount_gte: Int
  operatorCount_lte: Int
  operatorCount_in: [Int!]
  operatorCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SponsorshipDailyBucket_filter]
  or: [SponsorshipDailyBucket_filter]
}

enum SponsorshipDailyBucket_orderBy {
  id
  sponsorship
  sponsorship__id
  sponsorship__metadata
  sponsorship__isRunning
  sponsorship__totalPayoutWeiPerSec
  sponsorship__operatorCount
  sponsorship__totalStakedWei
  sponsorship__unallocatedWei
  sponsorship__projectedInsolvency
  sponsorship__creator
  date
  totalStakedWei
  unallocatedWei
  projectedInsolvency
  spotAPY
  totalPayoutsCumulative
  operatorCount
}

input Sponsorship_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stream: String
  stream_not: String
  stream_gt: String
  stream_lt: String
  stream_gte: String
  stream_lte: String
  stream_in: [String!]
  stream_not_in: [String!]
  stream_contains: String
  stream_contains_nocase: String
  stream_not_contains: String
  stream_not_contains_nocase: String
  stream_starts_with: String
  stream_starts_with_nocase: String
  stream_not_starts_with: String
  stream_not_starts_with_nocase: String
  stream_ends_with: String
  stream_ends_with_nocase: String
  stream_not_ends_with: String
  stream_not_ends_with_nocase: String
  stream_: Stream_filter
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  isRunning: Boolean
  isRunning_not: Boolean
  isRunning_in: [Boolean!]
  isRunning_not_in: [Boolean!]
  totalPayoutWeiPerSec: BigInt
  totalPayoutWeiPerSec_not: BigInt
  totalPayoutWeiPerSec_gt: BigInt
  totalPayoutWeiPerSec_lt: BigInt
  totalPayoutWeiPerSec_gte: BigInt
  totalPayoutWeiPerSec_lte: BigInt
  totalPayoutWeiPerSec_in: [BigInt!]
  totalPayoutWeiPerSec_not_in: [BigInt!]
  stakes_: Stake_filter
  operatorCount: Int
  operatorCount_not: Int
  operatorCount_gt: Int
  operatorCount_lt: Int
  operatorCount_gte: Int
  operatorCount_lte: Int
  operatorCount_in: [Int!]
  operatorCount_not_in: [Int!]
  totalStakedWei: BigInt
  totalStakedWei_not: BigInt
  totalStakedWei_gt: BigInt
  totalStakedWei_lt: BigInt
  totalStakedWei_gte: BigInt
  totalStakedWei_lte: BigInt
  totalStakedWei_in: [BigInt!]
  totalStakedWei_not_in: [BigInt!]
  unallocatedWei: BigInt
  unallocatedWei_not: BigInt
  unallocatedWei_gt: BigInt
  unallocatedWei_lt: BigInt
  unallocatedWei_gte: BigInt
  unallocatedWei_lte: BigInt
  unallocatedWei_in: [BigInt!]
  unallocatedWei_not_in: [BigInt!]
  projectedInsolvency: BigInt
  projectedInsolvency_not: BigInt
  projectedInsolvency_gt: BigInt
  projectedInsolvency_lt: BigInt
  projectedInsolvency_gte: BigInt
  projectedInsolvency_lte: BigInt
  projectedInsolvency_in: [BigInt!]
  projectedInsolvency_not_in: [BigInt!]
  flags_: Flag_filter
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Sponsorship_filter]
  or: [Sponsorship_filter]
}

enum Sponsorship_orderBy {
  id
  stream
  stream__id
  stream__metadata
  stream__createdAt
  stream__updatedAt
  metadata
  isRunning
  totalPayoutWeiPerSec
  stakes
  operatorCount
  totalStakedWei
  unallocatedWei
  projectedInsolvency
  flags
  creator
}

type Stake {
  id: ID!
  operator: Operator!
  amount: BigInt!
  allocatedWei: BigInt!
  date: BigInt
  sponsorship: Sponsorship
}

input Stake_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  operator: String
  operator_not: String
  operator_gt: String
  operator_lt: String
  operator_gte: String
  operator_lte: String
  operator_in: [String!]
  operator_not_in: [String!]
  operator_contains: String
  operator_contains_nocase: String
  operator_not_contains: String
  operator_not_contains_nocase: String
  operator_starts_with: String
  operator_starts_with_nocase: String
  operator_not_starts_with: String
  operator_not_starts_with_nocase: String
  operator_ends_with: String
  operator_ends_with_nocase: String
  operator_not_ends_with: String
  operator_not_ends_with_nocase: String
  operator_: Operator_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  allocatedWei: BigInt
  allocatedWei_not: BigInt
  allocatedWei_gt: BigInt
  allocatedWei_lt: BigInt
  allocatedWei_gte: BigInt
  allocatedWei_lte: BigInt
  allocatedWei_in: [BigInt!]
  allocatedWei_not_in: [BigInt!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  sponsorship: String
  sponsorship_not: String
  sponsorship_gt: String
  sponsorship_lt: String
  sponsorship_gte: String
  sponsorship_lte: String
  sponsorship_in: [String!]
  sponsorship_not_in: [String!]
  sponsorship_contains: String
  sponsorship_contains_nocase: String
  sponsorship_not_contains: String
  sponsorship_not_contains_nocase: String
  sponsorship_starts_with: String
  sponsorship_starts_with_nocase: String
  sponsorship_not_starts_with: String
  sponsorship_not_starts_with_nocase: String
  sponsorship_ends_with: String
  sponsorship_ends_with_nocase: String
  sponsorship_not_ends_with: String
  sponsorship_not_ends_with_nocase: String
  sponsorship_: Sponsorship_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Stake_filter]
  or: [Stake_filter]
}

enum Stake_orderBy {
  id
  operator
  operator__id
  operator__delegatorCount
  operator__poolValue
  operator__totalValueInSponsorshipsWei
  operator__freeFundsWei
  operator__poolValueTimestamp
  operator__poolValueBlockNumber
  operator__poolTokenTotalSupplyWei
  operator__exchangeRate
  operator__metadataJsonString
  operator__owner
  amount
  allocatedWei
  date
  sponsorship
  sponsorship__id
  sponsorship__metadata
  sponsorship__isRunning
  sponsorship__totalPayoutWeiPerSec
  sponsorship__operatorCount
  sponsorship__totalStakedWei
  sponsorship__unallocatedWei
  sponsorship__projectedInsolvency
  sponsorship__creator
}

type Stream {
  """stream ID = 'creator address'/'path' where path can be any string"""
  id: ID!
  """Stream metadata JSON"""
  metadata: String!
  """Permissions that each Ethereum address owns to this stream"""
  permissions(skip: Int = 0, first: Int = 100, orderBy: StreamPermission_orderBy, orderDirection: OrderDirection, where: StreamPermission_filter): [StreamPermission!]
  """
  Nodes the have been registered as storage nodes to this stream in the StreamStorageRegistry
  """
  storageNodes(skip: Int = 0, first: Int = 100, orderBy: Node_orderBy, orderDirection: OrderDirection, where: Node_filter): [Node!]
  """date created. This is a timestamp in seconds"""
  createdAt: BigInt
  """date updated. This is a timestamp in seconds"""
  updatedAt: BigInt
  sponsorships(skip: Int = 0, first: Int = 100, orderBy: Sponsorship_orderBy, orderDirection: OrderDirection, where: Sponsorship_filter): [Sponsorship!]
}

type StreamPermission {
  id: ID!
  """Ethereum address, owner of this permission"""
  userAddress: Bytes!
  """Target stream this permission applies to"""
  stream: Stream
  """Edit permission enables changing the stream's metadata"""
  canEdit: Boolean
  """
  canDelete permission allows deleting the stream from the StreamRegistry
  """
  canDelete: Boolean
  """
  publishExpiration timestamp tells until what time this address may publish data to the stream
  """
  publishExpiration: BigInt
  """
  subscribeExpires timestamp tells until what time this address may subscribe to the stream
  """
  subscribeExpiration: BigInt
  """
  grant permission allows granting and revoking permissions to this stream
  """
  canGrant: Boolean
}

input StreamPermission_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: Bytes
  userAddress_not: Bytes
  userAddress_gt: Bytes
  userAddress_lt: Bytes
  userAddress_gte: Bytes
  userAddress_lte: Bytes
  userAddress_in: [Bytes!]
  userAddress_not_in: [Bytes!]
  userAddress_contains: Bytes
  userAddress_not_contains: Bytes
  stream: String
  stream_not: String
  stream_gt: String
  stream_lt: String
  stream_gte: String
  stream_lte: String
  stream_in: [String!]
  stream_not_in: [String!]
  stream_contains: String
  stream_contains_nocase: String
  stream_not_contains: String
  stream_not_contains_nocase: String
  stream_starts_with: String
  stream_starts_with_nocase: String
  stream_not_starts_with: String
  stream_not_starts_with_nocase: String
  stream_ends_with: String
  stream_ends_with_nocase: String
  stream_not_ends_with: String
  stream_not_ends_with_nocase: String
  stream_: Stream_filter
  canEdit: Boolean
  canEdit_not: Boolean
  canEdit_in: [Boolean!]
  canEdit_not_in: [Boolean!]
  canDelete: Boolean
  canDelete_not: Boolean
  canDelete_in: [Boolean!]
  canDelete_not_in: [Boolean!]
  publishExpiration: BigInt
  publishExpiration_not: BigInt
  publishExpiration_gt: BigInt
  publishExpiration_lt: BigInt
  publishExpiration_gte: BigInt
  publishExpiration_lte: BigInt
  publishExpiration_in: [BigInt!]
  publishExpiration_not_in: [BigInt!]
  subscribeExpiration: BigInt
  subscribeExpiration_not: BigInt
  subscribeExpiration_gt: BigInt
  subscribeExpiration_lt: BigInt
  subscribeExpiration_gte: BigInt
  subscribeExpiration_lte: BigInt
  subscribeExpiration_in: [BigInt!]
  subscribeExpiration_not_in: [BigInt!]
  canGrant: Boolean
  canGrant_not: Boolean
  canGrant_in: [Boolean!]
  canGrant_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StreamPermission_filter]
  or: [StreamPermission_filter]
}

enum StreamPermission_orderBy {
  id
  userAddress
  stream
  stream__id
  stream__metadata
  stream__createdAt
  stream__updatedAt
  canEdit
  canDelete
  publishExpiration
  subscribeExpiration
  canGrant
}

input Stream_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  permissions_: StreamPermission_filter
  storageNodes_: Node_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  sponsorships_: Sponsorship_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Stream_filter]
  or: [Stream_filter]
}

enum Stream_orderBy {
  id
  metadata
  permissions
  storageNodes
  createdAt
  updatedAt
  sponsorships
}

type Subscription {
  streamPermission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StreamPermission
  streamPermissions(
    skip: Int = 0
    first: Int = 100
    orderBy: StreamPermission_orderBy
    orderDirection: OrderDirection
    where: StreamPermission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StreamPermission!]!
  stream(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stream
  streams(
    skip: Int = 0
    first: Int = 100
    orderBy: Stream_orderBy
    orderDirection: OrderDirection
    where: Stream_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stream!]!
  node(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Node
  nodes(
    skip: Int = 0
    first: Int = 100
    orderBy: Node_orderBy
    orderDirection: OrderDirection
    where: Node_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Node!]!
  projectPermission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectPermission
  projectPermissions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectPermission_orderBy
    orderDirection: OrderDirection
    where: ProjectPermission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectPermission!]!
  projectPaymentDetails(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectPaymentDetails_orderBy
    orderDirection: OrderDirection
    where: ProjectPaymentDetails_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectPaymentDetails!]!
  projectSubscription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectSubscription
  projectSubscriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectSubscription_orderBy
    orderDirection: OrderDirection
    where: ProjectSubscription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectSubscription!]!
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  projectPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectPurchase
  projectPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectPurchase_orderBy
    orderDirection: OrderDirection
    where: ProjectPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectPurchase!]!
  projectStakeByUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectStakeByUser
  projectStakeByUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectStakeByUser_orderBy
    orderDirection: OrderDirection
    where: ProjectStakeByUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectStakeByUser!]!
  projectStakingDayBucket(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectStakingDayBucket
  projectStakingDayBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectStakingDayBucket_orderBy
    orderDirection: OrderDirection
    where: ProjectStakingDayBucket_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectStakingDayBucket!]!
  operator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Operator
  operators(
    skip: Int = 0
    first: Int = 100
    orderBy: Operator_orderBy
    orderDirection: OrderDirection
    where: Operator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Operator!]!
  operatorDailyBucket(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OperatorDailyBucket
  operatorDailyBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: OperatorDailyBucket_orderBy
    orderDirection: OrderDirection
    where: OperatorDailyBucket_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OperatorDailyBucket!]!
  delegation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegation
  delegations(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegation_orderBy
    orderDirection: OrderDirection
    where: Delegation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegation!]!
  sponsorship(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sponsorship
  sponsorships(
    skip: Int = 0
    first: Int = 100
    orderBy: Sponsorship_orderBy
    orderDirection: OrderDirection
    where: Sponsorship_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sponsorship!]!
  sponsorshipDailyBucket(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SponsorshipDailyBucket
  sponsorshipDailyBuckets(
    skip: Int = 0
    first: Int = 100
    orderBy: SponsorshipDailyBucket_orderBy
    orderDirection: OrderDirection
    where: SponsorshipDailyBucket_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SponsorshipDailyBucket!]!
  stake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stake
  stakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Stake_orderBy
    orderDirection: OrderDirection
    where: Stake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stake!]!
  flag(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Flag
  flags(
    skip: Int = 0
    first: Int = 100
    orderBy: Flag_orderBy
    orderDirection: OrderDirection
    where: Flag_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Flag!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}