#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const program = require('commander')
const { gettextToI18next, i18nextToPo } = require('i18next-conv')
const lodash = require('lodash')

const localeFile = (locale, ext) => {
    const dir = path.resolve(process.cwd(), 'src', 'i18n')
    return path.join(dir, `${locale}.${ext || 'po'}`)
}

const keys = (filename) => {
    const unsorted = fs
        .readFileSync(localeFile(filename, 'po'))
        .toString()
        .match(/^msgid\s+"([^"]+)"$/gm) || []

    return unsorted.sort()
}

const language = (l) => (l === 'cn' ? 'zh' : l)

program
    .version('1.0.0')
    .description('App that should make life with languages easier. Fingers crossed.')

program
    .command('json [lang]')
    .description('Exports <lang>.po to json.')
    .action((lang) => {
        const l = lang || 'en'
        const fileName = localeFile(l)
        const file = fs.readFileSync(fileName)

        gettextToI18next(language(l), file)
            .then((json) => {
                fs.writeFileSync(localeFile(l, 'json'), JSON.stringify(JSON.parse(json), null, 4))
            })
    })

program
    .command('po [lang]')
    .description('Exports <lang>.json to po.')
    .action((lang) => {
        const l = lang || 'en'
        const fileName = localeFile(l, 'json')
        const file = fs.readFileSync(fileName)

        i18nextToPo(language(l), file)
            .then((po) => {
                fs.writeFileSync(localeFile(l, 'po'), po)
            })
    })

program
    .command('add <key>')
    .description('Adds a new translation field to en.po.')
    .action((key) => {
        const fileName = localeFile('en', 'po')
        const file = fs.readFileSync(fileName)
        const keyToTree = (k) => {
            if (k.length === 0) {
                return ''
            }
            if (k[0]) {
                return {
                    [k[0]]: keyToTree(k.slice(1)),
                }
            }
            return {}
        }

        gettextToI18next('en', file)
            .then(JSON.parse)
            .then((obj) => {
                i18nextToPo('en', JSON.stringify(lodash.merge({}, obj, keyToTree(key.split(/\./)), obj)))
                    .then((po) => {
                        fs.writeFileSync(fileName, po)
                    })
            })
    })

program
    .command('sort [lang]')
    .description('Sorts translations keys in en.po.')
    .action((lang) => {
        const l = lang || 'en'
        const fileName = localeFile(l, 'po')
        const file = fs.readFileSync(fileName)
        const sorted = keys(l)
            .concat([''])
            .join('\nmsgstr ""\n\n')

        Promise
            .all([gettextToI18next(language(l), sorted), gettextToI18next(language(l), file)])
            .then((values) => {
                const [so, unso] = values
                const final = lodash.merge({}, JSON.parse(so), JSON.parse(unso))
                i18nextToPo(language(l), JSON.stringify(final)).then((data) => {
                    fs.writeFileSync(fileName, data)
                })
            })
    })

program
    .command('sync <lang>')
    .description('Syncs given locale with en.po.')
    .action((lang) => {
        const enFile = fs.readFileSync(localeFile('en', 'po'))
        const langFilename = localeFile(lang, 'po')
        const langFile = fs.readFileSync(langFilename)
        const enKeys = keys('en').map((key) => key.replace(/(^msgid ")|("$)/g, '').replace(/##/g, '.'))

        Promise
            .all([
                gettextToI18next(language(lang), langFile),
                gettextToI18next('en', enFile),
            ])
            .then(([langJson, enJson]) => {
                const e = JSON.parse(enJson)
                const l = lodash.pick(JSON.parse(langJson), enKeys)
                const newDest = lodash.merge({}, e, l)

                i18nextToPo(language(lang), JSON.stringify(newDest)).then((data) => {
                    fs.writeFileSync(langFilename, data)
                })
            })
    })

program.parse(process.argv)
