name: Lint, build and test
on: [push]

defaults:
  run:
    working-directory: app

jobs:
  linting:
    name: eslint, stylelint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      # common steps
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm ci
      # job specific steps
      - name: Run ESlint
        run: npm run eslint
      - name: Run Stylelint
        run: npm run stylelint
      - name: Hadolint for linting Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: ./app/Dockerfile
          config: ./.hadolint.yaml

  jestSetup:
    name: 'Set up jest chunks'
    runs-on: ubuntu-latest
    outputs:
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
    steps:
      - uses: actions/checkout@v3
      - id: set-test-chunks
        name: Set Chunks
        run: echo "::set-output name=test-chunks::$(npx jest --listTests --json | jq -cM '[_nwise(length / 5 | ceil)]')"
      - id: set-test-chunk-ids
        name: Set Chunk IDs
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}

  jest:
    name: Jest Tests (chunk ${{ matrix.chunk }})
    runs-on: ubuntu-latest
    needs:
      - jestSetup
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x]
        chunk: ${{ fromJson(needs.jestSetup.outputs['test-chunk-ids']) }}
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0
        with:
          services-to-start: "mysql redis core-api cassandra parity-node0 parity-sidechain-node0 bridge broker-node-storage-1 nginx smtp"
      - name: Run Jest Tests
        run: echo $CHUNKS | jq '.[${{ matrix.chunk }}] | .[] | @text' | xargs npx jest --verbose --useStderr --forceExit --coverage=false
        env:
          CHUNKS: ${{ needs.jestSetup.outputs['test-chunks'] }}
          TEST_HOOKS: 1


  cypress:
    if: ${{ false }}
    name: Cypress Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      # common steps
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm ci
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-
      # job specific steps
      - name: Build app
        run: npm run build
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0
        with:
          services-to-start: "mysql redis core-api cassandra parity-node0 parity-sidechain-node0 bridge broker-node-storage-1 nginx smtp"
      - name: Run Cypress tests
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          headless: true
          working-directory: app
          # Start serving 'dist' folder from previous build step
          start: npx serve dist --listen 3333 --single
          wait-on: "http://localhost"
          wait-on-timeout: 120
      - uses: actions/upload-artifact@master
        with:
          name: screenshots
          path:
            cypress/screenshots
            # there might be no screenshots created when:
            # - there are no test failures
            # so only upload screenshots if previous step has failed
          if: failure()

  chromatic:
    name: Chromatic Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      # common steps
      - uses: actions/checkout@v3
        with:
          # Chromatic needs full history
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: |
          npm ci
      # job specific steps
      - name: Build Storybook
        run: npm run build-storybook --output-dir storybook-static
      - name: Publish storybook to Chromatic
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          exitZeroOnChanges: true
          workingDir: app
          # Use output folder from previous step
          storybookBuildDir: storybook-static

